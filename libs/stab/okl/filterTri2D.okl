/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

@kernel void filterTri2D(const dlong Nelements,
                            @restrict const  dlong  *  elementIds,
                            @restrict const  dfloat *  filterM,
                            @restrict        dfloat *  q){

  for(dlong e=0;e<Nelements;e++; @outer(0)){  // for all elements

    @shared dfloat s_q[p_sNfields][p_Np];
    @exclusive int eid[p_dNfields];
    @exclusive int elmActive;

    for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
        elmActive = 0; 

        for(int fld=0; fld<p_dNfields;++fld){
          eid[fld] = elementIds[e*p_dNfields + fld]; 
          // Active this element if it is detected for any field 
          if(eid[fld]>0){ elmActive=1; }
        }
        
        if(elmActive){ // For detected Elements
        const dlong id = e*p_sNfields*p_Np + n;
        #pragma unroll p_sNfields
        for(int fld=0; fld<p_sNfields;++fld){
          s_q[fld][n] = eid[fld] > 0 ? q[id+fld*p_Np] : 0.0;
        }
       }
      }



    for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
      if(elmActive){
        dfloat r_qM[p_sNfields];

       #pragma unroll p_sNfields
       for (int fld=0;fld<p_sNfields;fld++)
          r_qM[fld] = 0.0;

        #pragma unroll p_Np
        for (int k=0;k<p_Np;k++) {
          const dfloat fmn = filterM[n+k*p_Np];
          for (int fld=0;fld<p_sNfields;fld++){
            if(eid[fld]>0){
             r_qM[fld] += fmn*s_q[fld][k];
            }
          }
        
        }

        const dlong qbase = e*p_Np*p_sNfields + n;
        #pragma unroll p_sNfields
        for (int fld=0;fld<p_sNfields;fld++){
          q[qbase+fld*p_Np] = eid[fld] > 0 ? r_qM[fld] : s_q[fld][n];
        }
                  
      }
    }
  }
}










// 
// @kernel void filterHJSTri2D(const dlong Nelements,
//                             @restrict const  dlong  *  elementIds,
//                             @restrict const  dfloat *  filterM,
//                             @restrict        dfloat *  q){

//   for(dlong eo=0;eo<Nelements;eo+=p_sNblockV;@outer(0)){  // for all elements

//     @shared dfloat s_q[p_sNblockV][p_sNfields][p_Np];
//     @exclusive int eid;
//     // @exclusive dlong e;

//     for(int es=0;es<p_sNblockV;++es;@inner(1)){// for all elements in block
//       for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
//        const dlong e = eo+es; // element in block
//         if(e < Nelements){
//           eid = elementIds[e];

//           if(eid>0){ // For detected Elements
//           const dlong id = e*p_sNfields*p_Np + n;
//           #pragma unroll p_sNfields
//           for(int fld=0; fld<p_sNfields;++fld){
//             s_q[es][fld][n] = q[id+fld*p_Np];
//           }
//          }
//         }
//       }
//     }

//     // make sure all node data is loaded into @shared

//     for(int es=0;es<p_sNblockV;++es;@inner(1)){// for all elements in block
//       for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element
//         const dlong e = eo+es; // element in block
//         if(e<Nelements && eid>0){
//         // if(e<Nelements){

//         	dfloat r_qM[p_sNfields];

//          #pragma unroll p_sNfields
//      		 for (int fld=0;fld<p_sNfields;fld++)
//         		r_qM[fld] = 0.0;


//         	#pragma unroll p_Np
//           for (int k=0;k<p_Np;k++) {
//             const dfloat fmn = filterM[n+k*p_Np];

//         		for (int fld=0;fld<p_sNfields;fld++){
//           		r_qM[fld] += fmn*s_q[es][fld][k];
//             }
      		
//       		}


//       		const dlong qbase = e*p_Np*p_sNfields + n;
//       		#pragma unroll p_sNfields
//           for (int fld=0;fld<p_sNfields;fld++){
//             q[qbase+fld*p_Np] = r_qM[fld];
//           }
                    
//         }
//       }
//     }
//   }
// }


