/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

// 
@kernel void filterHJSQuad2D(const dlong Nelements,
                            @restrict const  dlong  *  elementIds,
                            @restrict const  dfloat *  filterM,
                            @restrict        dfloat *  q){

  for(dlong e=0;e<Nelements;e++; @outer(0)){  // for all elements

    @shared dfloat s_q[p_sNfields][p_Nq][p_Nq];
    @shared dfloat s_FMT[p_Nq][p_Nq];
    @exclusive dfloat r_q[p_sNfields];

    @exclusive int eid[p_sNfields];
    @exclusive int elmActive;


    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        elmActive = 0; 
        for(int fld=0; fld<p_sNfields;++fld){
          eid[fld] = elementIds[e*p_dNfields + fld]; 
          // Active this element if it is detected for any field 
          if(eid[fld]>0){ elmActive=1; }
        }

        if(elmActive){ // For detected Elements
          
          s_FMT[j][i] = filterM[i+j*p_Nq];
          
          const dlong id = e*p_Np*p_sNfields + j*p_Nq + i;
          #pragma unroll p_sNfields
          for(int fld=0; fld<p_sNfields;++fld){
            // s_q[fld][j][i] = eid[fld] > 0 ? q[id+fld*p_Np] : 0.0;
            s_q[fld][j][i] = q[id+fld*p_Np];
          }       
        }

      }
    }


    // Filter in i and store in register
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (elmActive) {
          
          for(int fld=0; fld<p_sNfields; fld++){
            r_q[fld] = 0.f; 
          }
          
          #pragma unroll p_Nq
          for(int n=0; n<p_Nq; n++) {
            const dfloat Fni = s_FMT[n][i];
            for(int fld=0; fld<p_sNfields; fld++){
              // if(eid[fld]>0){
              r_q[fld] += Fni * s_q[fld][j][n];
              // } 
            }

          }
        }
      }
    }


    //write register back to @shared
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (elmActive){
          for(int fld=0; fld<p_sNfields; fld++){
            // if(eid[fld]>0){
            s_q[fld][j][i] = r_q[fld];
            // }
          }
        }
      }
    }


    // Filter in i and store in register
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (elmActive) {
          
          for(int fld=0; fld<p_sNfields; fld++){
            r_q[fld] = 0.f; 
          }

          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Fni = s_FMT[n][j];
            for(int fld=0; fld<p_sNfields; fld++){
              // if(eid[fld]>0){
              r_q[fld] += Fni * s_q[fld][n][i];
              // } 
            }

          }
        }
      }
    }


// Filter in i and store in register
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        if (elmActive) {

          const dlong qbase = e*p_Np*p_sNfields + j*p_Nq + i;
          #pragma unroll p_sNfields
          for (int fld=0;fld<p_sNfields;fld++){
            if(eid[fld]){
               q[qbase+fld*p_Np] = r_q[fld];    
            }
          }
        }

      }
    }

  }
}





// // 
// @kernel void filterHJSQuad2D(const dlong Nelements,
//                             @restrict const  dlong  *  elementIds,
//                             @restrict const  dfloat *  filterM,
//                             @restrict        dfloat *  q){

//   for(dlong e=0;e<Nelements;e++; @outer(0)){  // for all elements

//     @shared dfloat s_q[p_sNfields][p_Nq][p_Nq];
//     @shared dfloat s_FMT[p_Nq][p_Nq];
//     @exclusive dfloat r_q[p_sNfields];

//     @exclusive int eid[p_sNfields];
//     @exclusive int elmActive;


//     for(int j=0;j<p_Nq;++j;@inner(1)){
//       for(int i=0;i<p_Nq;++i;@inner(0)){
//         elmActive = 0; 
//         for(int fld=0; fld<p_sNfields;++fld){
//           eid[fld] = elementIds[e*p_dNfields + fld]; 
//           // Active this element if it is detected for any field 
//           if(eid[fld]>0){ elmActive=1; }
//         }

//         if(elmActive){ // For detected Elements
          
//           s_FMT[j][i] = filterM[i+j*p_Nq];
          
//           const dlong id = e*p_Np*p_sNfields + j*p_Nq + i;
//           #pragma unroll p_sNfields
//           for(int fld=0; fld<p_sNfields;++fld){
//             // s_q[fld][j][i] = eid[fld] > 0 ? q[id+fld*p_Np] : 0.0;
//             s_q[fld][j][i] = q[id+fld*p_Np];
//           }       
//         }

//       }
//     }


//     // Filter in i and store in register
//     for(int j=0;j<p_Nq;++j;@inner(1)){
//       for(int i=0;i<p_Nq;++i;@inner(0)){
//         if (elmActive) {
          
//           for(int fld=0; fld<p_sNfields; fld++){
//             r_q[fld] = 0.f; 
//           }
          
//           #pragma unroll p_Nq
//           for(int n=0; n<p_Nq; n++) {
//             const dfloat Fni = s_FMT[n][i];
//             const dfloat Fnj = s_FMT[n][j];
//             for(int fld=0; fld<p_sNfields; fld++){
//               // if(eid[fld]>0){
//               r_q[fld] += Fni * s_q[fld][j][n];
//               r_q[fld] += Fnj * s_q[fld][n][i];
//               // } 
//             }
//           }

//            const dlong qbase = e*p_Np*p_sNfields + j*p_Nq + i;
//           #pragma unroll p_sNfields
//           for (int fld=0;fld<p_sNfields;fld++){
//             if(eid[fld]){
//                q[qbase+fld*p_Np] = r_q[fld];    
//             }
//           }

//         }
//       }
//     }
//   }
// }


