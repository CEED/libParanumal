/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

//set every entry of a vector to a constant scalar
@kernel void setAll(const dlong N, 
                    const int alpha, 
                    @restrict dlong *a){

  for(dlong n=0;n<N;++n;@tile(p_blockSize,@outer,@inner)){
    a[n] = alpha;
  }
}



//copy a dlong array to float to use buildin functions
@kernel void copyToFloat(const dlong N, 
                      @restrict dlong  *a, 
                      @restrict dfloat *b){

  for(dlong n=0;n<N;++n;@tile(p_blockSize,@outer,@inner)){
    const int id = a[n]; 
    b[n] = id >0 ? 1.0 : 0.0;
  }
}


//copy a dlong array to float to use buildin functions
@kernel void copyToInt(const dlong N, 
                      @restrict dfloat  *a, 
                      @restrict dlong *b){

  for(dlong n=0;n<N;++n;@tile(p_blockSize,@outer,@inner)){
    b[n] = int(a[n]);
  }
}




@kernel void extractField(const dlong Nelements, 
                          const int field_id, 
                          @restrict const dfloat *Q,
                          @restrict       dfloat *q){

  for(dlong e=0;e<Nelements;++e;@outer(0)){
    for(int n=0;n<p_Np;++n;@inner(0)){
      const dlong base = e*p_Np*s_Nsfields + n;
      const dfloat  rq  = Q[base+field_id*p_Np];
      q[e*p_Np + n] =  rq;
    }
  }  
}




// //copy a dlong array to float to use buildin functions
// @kernel void cnsConservativeToPrimitive2D(const dlong Nelements, 
//                                         const int isIsothermal,
//                                         const dfloat gamma,  
//                                         @restrict const dfloat  *qc, 
//                                         @restrict dfloat *qp){

//   for(dlong e=0;e<Nelements;++e;@outer(0)){
//     for(int n=0;n<p_Np;++n;@inner(0)){
//       const dlong base = e*p_Np*p_Nfields + n;

//       const dfloat r  = qc[base+0*p_Np];
//       const dfloat ru = qc[base+1*p_Np];
//       const dfloat rv = qc[base+2*p_Np];
      
//       const dfloat u = ru/r, v = rv/r; 
      
//       dfloat p; 
//       if(!isIsothermal) {
//         const dfloat E  = qc[base+3*p_Np];
//         p = (gamma-1)*(E-0.5*(ru*u+rv*v));
//       }else{
//        p = r*gamma*gamma;
//       }

//       qp[base + 0*p_Np]   = r;  
//       qp[base + 1*p_Np]   = u;  
//       qp[base + 2*p_Np]   = v;
//       qp[base + 3*p_Np]   = p;
//   }
// }
// }



// //copy a dlong array to float to use buildin functions
// @kernel void cnsConservativeToPrimitive3D(const dlong Nelements, 
//                                         const int isIsothermal,
//                                         const dfloat gamma,  
//                                         @restrict const dfloat  *qc, 
//                                         @restrict dfloat *qp){

//   for(dlong e=0;e<Nelements;++e;@outer(0)){
//     for(int n=0;n<p_Np;++n;@inner(0)){
//       const dlong base = e*p_Np*p_Nfields + n;

//       const dfloat r  = qc[base+0*p_Np];
//       const dfloat ru = qc[base+1*p_Np];
//       const dfloat rv = qc[base+2*p_Np];
//       const dfloat rw = qc[base+3*p_Np];
      
//       const dfloat u = ru/r, v = rv/r, w = rw/r; 
      
//       dfloat p; 
//       if(!isIsothermal) {
//         const dfloat E  = qc[base+4*p_Np];
//         p = (gamma-1)*(E-0.5*(ru*u+rv*v+rw*w));
//       }else{
//         p = r*gamma*gamma; 
//       }

//       qp[base + 0*p_Np] = r;  
//       qp[base + 1*p_Np] = u;  
//       qp[base + 2*p_Np] = v;
//       qp[base + 3*p_Np] = w;
//       qp[base + 4*p_Np] = p;
//   }
// }
// }


// //copy a dlong array to float to use buildin functions
// @kernel void cnsPrimitiveToConservative2D(const dlong Nelements, 
//                                         const int isIsothermal,
//                                         const dfloat gamma,  
//                                         @restrict const dfloat  *qp, 
//                                         @restrict dfloat *qc){

//   for(dlong e=0;e<Nelements;++e;@outer(0)){
//     for(int n=0;n<p_Np;++n;@inner(0)){
//       const dlong base = e*p_Np*p_Nfields + n;

//       const dfloat r = qp[base+0*p_Np];
//       const dfloat u = qp[base+1*p_Np];
//       const dfloat v = qp[base+2*p_Np];      
      
//       dfloat E; 
//       if(!isIsothermal){
//         const dfloat p  = qp[base+3*p_Np];
//         E = p/(gamma-1) + 0.5*r*(u*u+v*v);
//       }

//       qc[base + 0*p_Np]   = r;  
//       qc[base + 1*p_Np]   = r*u;  
//       qc[base + 2*p_Np]   = r*v;
//       if(!isIsothermal){  
//         qc[base + 3*p_Np] =E;
//       }
//   }
// }

// }



// //copy a dlong array to float to use buildin functions
// @kernel void cnsPrimitiveToConservative3D(const dlong Nelements, 
//                                         const int isIsothermal,
//                                         const dfloat gamma,  
//                                         @restrict const dfloat  *qp, 
//                                         @restrict dfloat *qc){

//   for(dlong e=0;e<Nelements;++e;@outer(0)){
//     for(int n=0;n<p_Np;++n;@inner(0)){
//       const dlong base = e*p_Np*p_Nfields + n;

//       const dfloat r = qp[base+0*p_Np];
//       const dfloat u = qp[base+1*p_Np];
//       const dfloat v = qp[base+2*p_Np];
//       const dfloat w = qp[base+3*p_Np];
            
//       dfloat E; 
//       if(!isIsothermal){
//         const dfloat p  = qp[base+4*p_Np];
//         E = p/(gamma-1) + 0.5*r*(u*u+v*v+w*w);
//       }

      
//       qc[base + 0*p_Np] = r;  
//       qc[base + 1*p_Np] = r*u;  
//       qc[base + 2*p_Np] = r*v;
//       qc[base + 3*p_Np] = r*w;
//       if(!isIsothermal){  
//         qc[base + 4*p_Np] =E;
//       }
//   }
// }

// }


