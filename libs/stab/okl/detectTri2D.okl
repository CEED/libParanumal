/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

// function f = limiting(x,xmin,xmax,alpha,beta)

// % f = xmin + max(x-beta,0);
// % f = min(f-xmax,0)+xmax;

// f = xmin + lmax(x-beta,alpha);
// f = lmin(f-xmax,alpha) + xmax;

// Base line decay for the sensor: default value 1
#define BLDEC 1
#define mymax(a,b) (((a)>(b))?(a):(b))
#define mymin(a,b) (((a)<(b))?(a):(b))
#define ALPHA  1000


// Regularization of rho / p  (cannot be smaller than rmin / pmin)
dfloat LMAX(const dfloat x, const dfloat alpha){
  dfloat xmax = x*(atan(alpha*x)/M_PI + 0.5) - atan(alpha)/M_PI + 0.5;
  return xmax;
}


// Regularization of rho / p  (cannot be smaller than rmin / pmin)
dfloat LMIN(const dfloat x, const dfloat alpha){
  dfloat xmin = x - LMAX(x,alpha);
  return xmin;
}

// / Regularization of rho / p  (cannot be smaller than rmin / pmin)
dfloat LIM(const dfloat x,const dfloat xmin, const dfloat xmax,
	         const dfloat alpha,const dfloat beta){
  dfloat xlim = xmin + LMAX(x-beta, alpha); 
  xlim = LMIN(xlim-xmax, alpha) + xmax;
  return xlim;
}


@kernel void detectDucrosDiffusionTri2D(const dlong Nelements,
                                        @restrict const  dfloat *  pM,
                                        @restrict const  dfloat *  q,
                                        @restrict const  dfloat *  gradq,
                                        @restrict        dfloat *  qd){
 for(dlong e=0;e<Nelements;++e;@outer(0)){

    // @shared dfloat s_u[p_Np];
    // @shared dfloat s_v[p_Np];
    @shared dfloat s_S[p_Np];

    for(int n=0;n<p_Np;++n;@inner(0)){
    	 // conserved variables
      const dlong  qbase = e*p_Np*4 + n;
      const dfloat rr = q[qbase+0*p_Np];
      const dfloat ru = q[qbase+1*p_Np];
      const dfloat rv = q[qbase+2*p_Np];
      const dfloat ir  = 1.0/rr; 

      const dfloat u = ru*ir; 
      const dfloat v = rv*ir;
     
      // gradients
      const dlong id = e*p_Np*8 + n;
      const dfloat drrdx = gradq[id+0*p_Np];
      const dfloat drrdy = gradq[id+1*p_Np];     
      const dfloat drudx = gradq[id+2*p_Np];
      const dfloat drudy = gradq[id+3*p_Np];
      const dfloat drvdx = gradq[id+4*p_Np];
      const dfloat drvdy = gradq[id+5*p_Np];  

      // Find derivative of primitives
      const dfloat dudx  = (drudx - drrdx*u)*ir;
      const dfloat dvdx  = (drvdx - drrdx*v)*ir;
      const dfloat dudy  = (drudy - drrdy*u)*ir;
      const dfloat dvdy  = (drvdy - drrdy*v)*ir;

      // Compute divergence and vorticity
      const dfloat div  = (dudx + dvdy); 
      const dfloat vort = (dvdx - dudy);

      const dfloat sd = 

      // Compute divergence sensor
      // Prizolli's modification of Ducros detector
      s_S[n] = -div/ (sqrt(div*div) + sqrt(vort*vort)+1e-16);
      
      // Ducros's original detector
      // s_S[n] = div*div/ (div*div + vort*vort + 1.0E-16);

      
       // Person's modification of Ducros detector
       // dfloat div  = -(dudx + dvdy); 
       // dfloat vort = -(dvdx - dudy); 
       // vort = sqrt(vort*vort); 

       // const dfloat sigm = 1.0E4; 
       // div  = LIM(div, -sigm, sigm, ALPHA, -sigm); 
       // vort = LIM(vort, 0.0, sigm, ALPHA, 0.0); 

       // s_S[n] = div*div/ (div*div + vort*vort + 1.0E-16);

      



       // dfloat div2  = dudx + dvdy; 
       // dfloat vort2 = dvdx - dudy; 

      // div2 *= div2; vort2*=vort2; 

      // vort2 = vort2<10 ? 0:vort2; 
      // div2  = div2 <10 ? 0:div2; 

      // s_S[n] = div2/(div2 + vort2+1E-16); 
    }  

 		for(int n=0;n<p_Np;++n;@inner(0)){
    	if(n==0){
     		dfloat rs = 0.0; 
     		for(int i=0; i<p_Np; i++){
           rs += pM[i]*s_S[i];
        }
        // qd[e] =  rs>0.7 ? rs:0.0; 
        qd[e] =  rs; 
        // qd[e] =  1.0; 
     	}
    }

  }
}


// 
@kernel void detectKlocknerDiffusionTri2D(const dlong Nelements,
				    @restrict const dfloat* vgeo,
				    @restrict const int *  ModMap,
				    @restrict const dfloat * MM,               
				    @restrict const dfloat * InvVT,
				    @restrict const dfloat * LSF,
				    @restrict const dfloat * BLD,
				    @restrict const dfloat * Q, 
				    @restrict const dfloat * Qd, 
				    @restrict 		  dfloat * artVisc, 
				    @restrict       dlong *  ElementList){
#define p_Nel 1
#if BLDEC==1
#define reduce02(s_L2, NT)				\
   if(NT<p_Nq){						\
    for(int es=0;es<p_Nel;++es;@inner(1)){		\
      for(int n=0; n<p_Nq; n++; @inner(0)){		\
	if(n<NT && n+NT<p_Nq){				\
	  for(int fld=0; fld<s_Ndfields; fld++){	\
	    s_L2[es][fld][n]  += s_L2[es][fld][n+NT];	\
	  }						\
	}						\
      }							\
    }							\
  }
#endif


  for(dlong eo=0;eo<Nelements;eo+=p_Nel;@outer(0)){

    @shared dfloat s_Q[p_Nel][s_Ndfields][p_Np];
    @shared dfloat s_Qhat2[p_Nel][s_Ndfields][p_Np];
    @shared dfloat s_LogMod[p_Nel][s_Ndfields][p_Nq];

#if BLDEC==1
    @shared dfloat s_L2[p_Nel][s_Ndfields][p_Nq]; 
#endif
    @shared int s_ModMap[p_Np]; 
    @shared dfloat s_LSF[p_Nq];
    @shared dfloat s_BLD[p_Nq];

    // prefetch global variables
    for(int es=0;es<p_Nel;++es;@inner(1)){
      
      for(int n=0; n<p_Nq; n++; @inner(0)){
				dlong e = eo+es;
				if(es==0){
				  s_LSF[n] = LSF[n];
				  s_BLD[n] = BLD[n];
				}

  		
	int m = n + es*p_Nq;
	while(m<p_Np*p_Nel && eo*p_Np+m<Nelements*p_Np){
	  const dlong id = m+eo*p_Np*s_Ndfields;
			  
	  for(int fld=0; fld<s_Ndfields; fld++){ 
	    s_Q[0][fld][m]  = Q[id + fld*p_Np];
	  }      
	  m += p_Nel*p_Nq;
	}

	// reset counter
	m = n + es*p_Nq;
	while(m<p_Np){
	  s_ModMap[m] = ModMap[m];
	  m += p_Nel*p_Nq;
	}
      
      }
    }


    // get modal coefficients and compute L2 norm
    for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq; n++; @inner(0)){

	dlong e = eo+es;
	dfloat L2[s_Ndfields];
	dfloat Qhatn[s_Ndfields]; 

#if BLDEC==1
	for(int fld=0; fld<s_Ndfields; fld++){ 
	  L2[fld]    = 0; 
	  // Qhatn[fld] = 0; 
	}
#endif

	if(e<Nelements){
	  int nn = n;

	  while(nn<p_Np){
	    // // dfloat Qhatn[p_Nfields]; 
	    for(int fld=0; fld<s_Ndfields; fld++){ 
	      Qhatn[fld] = 0; 
	    }

#pragma unroll p_Np
	    for(int m=0; m<p_Np;m++){
	      const dfloat invvt = InvVT[nn+m*p_Np]; 
	      for(int fld=0; fld<s_Ndfields; fld++){ 
					Qhatn[fld] += invvt*s_Q[es][fld][m];
	      }
	    }

	    for(int fld=0; fld<s_Ndfields; fld++){ 	    
	      dfloat Qhatn2 = Qhatn[fld]*Qhatn[fld];
	      s_Qhat2[es][fld][nn] = Qhatn2; 
#if BLDEC==1
	      L2[fld] += Qhatn2; // accumulate
#endif
	    }
	    nn += p_Nq;
	  }

#if BLDEC==1
	  const dfloat J = vgeo[e*p_Nvgeo + p_JID];
	  for(int fld=0; fld<s_Ndfields; fld++){ 
	    L2[fld] *= J;
	  }
#endif
	}

#if BLDEC==1
	for(int fld=0; fld<s_Ndfields; fld++){ 
	  s_L2[es][fld][n] = L2[fld];
	}
#endif
      }
    }

#if BLDEC==1
    // reduce02(s_L2, 128);
    reduce02(s_L2,  64);
    reduce02(s_L2,  16);
    reduce02(s_L2,   8);
    reduce02(s_L2,   4);
    reduce02(s_L2,   2);
    reduce02(s_L2,   1);
#endif
    // @barrier("local");

    //skyline pessimization: get 1D mods from 2D
    for(int es=0;es<p_Nel;++es;@inner(1)){    
      for(int n=0; n<p_Nq; n++; @inner(0)){   

	dlong e = eo+es;

	if(e<Nelements){

	  dfloat modsum[s_Ndfields];
	  dfloat norm[s_Ndfields];
	  dfloat res[s_Ndfields];


	  for(int fld=0; fld<s_Ndfields; fld++){ 
	    modsum[fld] = 0; 
	    norm[fld] = 0; 
	    res[fld] = 0; 
	  }

	  for(int i=0; i<n+1; i++){
	    const int nmods = 0.5*n*(n+1) + i; 
	    const int m     = s_ModMap[nmods];  // not coalesced!!!!
	    for(int fld=0; fld<s_Ndfields; fld++){ 
	      modsum[fld] += s_Qhat2[es][fld][m];
	    }
	  }


	  for(int fld=0; fld<s_Ndfields; fld++){ 
#if BLDEC==1
	    // norm = q' * MM * q on element e
	    norm[fld] = s_L2[es][fld][0];

	    res[fld] = log10f((float)(modsum[fld] + s_BLD[n]*norm[fld]));     
#else
	    res[fld] = log10f((float)(modsum[fld])); 
#endif

	    s_LogMod[es][fld][n] = 0.5*res[fld]; // use log(sqrt(a)) = 0.5*log(a)
	  }


	  // assumes p_Nel*p_Nq <= 32
	  if(n==0){
	    // Select the element if any field creates trouble

	    for(int fld=0; fld<s_Ndfields; fld++){ 
	    	// dfloat mincoeff = 100; 
	      // use running max from highest mode
	      dfloat runningMax = mymax(s_LogMod[es][fld][p_Nq-1], s_LogMod[es][fld][p_Nq-2]);
	      dfloat coeff = runningMax*s_LSF[p_Nq-2];

	      for(int j=p_Nq-2;j>0;--j){
					runningMax = mymax(runningMax, s_LogMod[es][fld][j]);
					// accumulate in least squares fit
					coeff += s_LSF[j-1]*runningMax;
	      }

	      // this handles zero field, do not select those elements!!!
	      coeff = fabs(coeff); 
	      const dfloat sk = coeff != coeff ? p_N : coeff; 	

	      const dfloat qd = Qd[e*s_Ndfields + fld]; 

	      dfloat avisc = 0.0; 
	    	if(sk<(s_sS0-s_sK0))
	  			avisc = 1.0; 
	  		else if(sk > (s_sS0 + s_sK0))
	  			avisc = 0.0; 
	  		else 
	  			avisc = 0.5*( 1. + sin( - 0.5* M_PI*(sk-s_sS0)/ s_sK0)); 
	  		
	  		// artVisc[e*s_Ndfields + fld] = avisc*qd;	 
	  		artVisc[e*s_Ndfields + fld] = avisc;	 
	  		// artVisc[e*s_Ndfields + fld] = sk;	 
	      // // It can be tuned: AK
	      // ElementList[e*s_Ndfields + fld] = avisc*qd > 0.10 ? 1 : 0;	 
	     ElementList[e*s_Ndfields + fld] = sk < (s_sS0+1) ? 1 : 0;	 	 
	    }
	  }

	}
      }
    }
  }
}

// 
@kernel void detectKlocknerTri2D(const dlong Nelements,
				    @restrict const dfloat* vgeo,
				    @restrict const int *  ModMap,
				    @restrict const dfloat * MM,               
				    @restrict const dfloat * InvVT,
				    @restrict const dfloat * LSF,
				    @restrict const dfloat * BLD,
				    @restrict const dfloat * Q, 
				    @restrict dfloat *  ElementList){
#define p_Nel 1
#if BLDEC==1
#define reduce02(s_L2, NT)				\
   if(NT<p_Nq){						\
    for(int es=0;es<p_Nel;++es;@inner(1)){		\
      for(int n=0; n<p_Nq; n++; @inner(0)){		\
	if(n<NT && n+NT<p_Nq){				\
	  for(int fld=0; fld<s_Ndfields; fld++){	\
	    s_L2[es][fld][n]  += s_L2[es][fld][n+NT];	\
	  }						\
	}						\
      }							\
    }							\
  }
#endif


  for(dlong eo=0;eo<Nelements;eo+=p_Nel;@outer(0)){

    @shared dfloat s_Q[p_Nel][s_Ndfields][p_Np];
    @shared dfloat s_Qhat2[p_Nel][s_Ndfields][p_Np];
    @shared dfloat s_LogMod[p_Nel][s_Ndfields][p_Nq];

#if BLDEC==1
    @shared dfloat s_L2[p_Nel][s_Ndfields][p_Nq]; 
#endif
    @shared int s_ModMap[p_Np]; 
    @shared dfloat s_LSF[p_Nq];
    @shared dfloat s_BLD[p_Nq];

    // prefetch global variables
    for(int es=0;es<p_Nel;++es;@inner(1)){
      
      for(int n=0; n<p_Nq; n++; @inner(0)){
				dlong e = eo+es;
				if(es==0){
				  s_LSF[n] = LSF[n];
				  s_BLD[n] = BLD[n];
				}

  		
	int m = n + es*p_Nq;
	while(m<p_Np*p_Nel && eo*p_Np+m<Nelements*p_Np){
	  const dlong id = m+eo*p_Np*s_Ndfields;
			  
	  for(int fld=0; fld<s_Ndfields; fld++){ 
	    s_Q[0][fld][m]  = Q[id + fld*p_Np];
	  }      
	  m += p_Nel*p_Nq;
	}

	// reset counter
	m = n + es*p_Nq;
	while(m<p_Np){
	  s_ModMap[m] = ModMap[m];
	  m += p_Nel*p_Nq;
	}
      
      }
    }


    // get modal coefficients and compute L2 norm
    for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq; n++; @inner(0)){

	dlong e = eo+es;
	dfloat L2[s_Ndfields];
	dfloat Qhatn[s_Ndfields]; 

#if BLDEC==1
	for(int fld=0; fld<s_Ndfields; fld++){ 
	  L2[fld]    = 0; 
	  // Qhatn[fld] = 0; 
	}
#endif

	if(e<Nelements){
	  int nn = n;

	  while(nn<p_Np){
	    // // dfloat Qhatn[p_Nfields]; 
	    for(int fld=0; fld<s_Ndfields; fld++){ 
	      Qhatn[fld] = 0; 
	    }

#pragma unroll p_Np
	    for(int m=0; m<p_Np;m++){
	      const dfloat invvt = InvVT[nn+m*p_Np]; 
	      for(int fld=0; fld<s_Ndfields; fld++){ 
					Qhatn[fld] += invvt*s_Q[es][fld][m];
	      }
	    }


	    for(int fld=0; fld<s_Ndfields; fld++){ 	    

	      dfloat Qhatn2 = Qhatn[fld]*Qhatn[fld];

	      s_Qhat2[es][fld][nn] = Qhatn2; 

#if BLDEC==1
	      L2[fld] += Qhatn2; // accumulate
#endif
	    }
	    nn += p_Nq;
	  }

#if BLDEC==1
	  const dfloat J = vgeo[e*p_Nvgeo + p_JID];
	  for(int fld=0; fld<s_Ndfields; fld++){ 
	    L2[fld] *= J;
	  }
#endif

	}

#if BLDEC==1
	for(int fld=0; fld<s_Ndfields; fld++){ 
	  s_L2[es][fld][n] = L2[fld];
	}
#endif
      }
    }




#if BLDEC==1
    // reduce02(s_L2, 128);
    reduce02(s_L2,  64);
    reduce02(s_L2,  16);
    reduce02(s_L2,   8);
    reduce02(s_L2,   4);
    reduce02(s_L2,   2);
    reduce02(s_L2,   1);
#endif
    // @barrier("local");

    //skyline pessimization: get 1D mods from 2D
    for(int es=0;es<p_Nel;++es;@inner(1)){    
      for(int n=0; n<p_Nq; n++; @inner(0)){   

	dlong e = eo+es;

	if(e<Nelements){

	  dfloat modsum[s_Ndfields];
	  dfloat norm[s_Ndfields];
	  dfloat res[s_Ndfields];


	  for(int fld=0; fld<s_Ndfields; fld++){ 
	    modsum[fld] = 0; 
	    norm[fld] = 0; 
	    res[fld] = 0; 
	  }

	  for(int i=0; i<n+1; i++){
	    const int nmods = 0.5*n*(n+1) + i; 
	    const int m     = s_ModMap[nmods];  // not coalesced!!!!
	    for(int fld=0; fld<s_Ndfields; fld++){ 
	      modsum[fld] += s_Qhat2[es][fld][m];
	    }
	  }


	  for(int fld=0; fld<s_Ndfields; fld++){ 
#if BLDEC==1
	    // norm = q' * MM * q on element e
	    norm[fld] = s_L2[es][fld][0];

	    res[fld] = log10f((float)(modsum[fld] + s_BLD[n]*norm[fld]));     
#else
	    res[fld] = log10f((float)(modsum[fld])); 
#endif

	    s_LogMod[es][fld][n] = 0.5*res[fld]; // use log(sqrt(a)) = 0.5*log(a)
	  }


	  // assumes p_Nel*p_Nq <= 32
	  if(n==0){
	    // Select the element if any field creates trouble

	    for(int fld=0; fld<s_Ndfields; fld++){ 
	    	// dfloat mincoeff = 100; 
	      // use running max from highest mode
	      dfloat runningMax = mymax(s_LogMod[es][fld][p_Nq-1], s_LogMod[es][fld][p_Nq-2]);
	      dfloat coeff = runningMax*s_LSF[p_Nq-2];

	      for(int j=p_Nq-2;j>0;--j){
					runningMax = mymax(runningMax, s_LogMod[es][fld][j]);
					// accumulate in least squares fit
					coeff += s_LSF[j-1]*runningMax;
	      }

	      const dfloat sk = fabs(coeff); 	
	      // // It can be tuned: AK
	      // const dfloat s0    = 2.0;  
	      // const dfloat kappa = 1.0; 	
	      // use (s0 + kappa)^2 = 9 or 4	     
	      ElementList[e*s_Ndfields + fld] = sk < (s_sS0+1) ? 1 : 0;	 	
	      // ElementList[e*s_Ndfields + fld] = 1; 
	    }
	  }

	}
      }
    }
  }
}

// 
@kernel void detectPerssonDiffusionTri2D(const dlong Nelements,
				    @restrict const dfloat* vgeo,
				    @restrict const dfloat * MM,
				    @restrict const dfloat * projectMn1,
				    @restrict const dfloat * Q, 
				    @restrict 		  dfloat * artVisc, 
				    @restrict       dlong *  ElementList){
#define p_Nel 1
#define reduce(s_L2, s_L2T, NT)				\
  if(NT<p_Nq){						\
    for(int es=0;es<p_Nel;++es;@inner(1)){		\
      for(int n=0; n<p_Nq; n++; @inner(0)){		\
	if(n<NT && n+NT<p_Nq){				\
	  for(int fld=0; fld<s_Ndfields; fld++){	\
	    s_L2[es][fld][n]  += s_L2[es][fld][n+NT];	\
	    s_L2T[es][fld][n] += s_L2T[es][fld][n+NT];	\
	  }						\
	}						\
      }							\
    }							\
  }

  for(dlong eo=0;eo<Nelements;eo+=p_Nel;@outer(0)){

    @shared dfloat s_Q[p_Nel][s_Ndfields][p_Np];
    @shared dfloat s_QT[p_Nel][s_Ndfields][p_Np];

    @shared dfloat s_L2Q[p_Nel][s_Ndfields][p_Np];
    @shared dfloat s_L2QT[p_Nel][s_Ndfields][p_Np];

    // prefetch global variables
    for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq; n++; @inner(0)){
		dlong e = eo+es;
	
		int m = n + es*p_Nq;
		while(m<p_Np*p_Nel && eo*p_Np+m<Nelements*p_Np){
			
			const dlong id = m+eo*p_Np*s_Ndfields;
	  
			for(int fld=0; fld<s_Ndfields; fld++){ 
			s_Q[0][fld][m]  = Q[id + fld*p_Np];
			}      
			m += p_Nel*p_Nq;
		}
      }
    }


    // get modal coefficients and compute L2 norm
    for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq; n++; @inner(0)){

				dlong e = eo+es;
			dfloat qt[s_Ndfields]; 
			if(e<Nelements){
	  		int nn = n;

	  		while(nn<p_Np){
	    		// dfloat Qhatn[p_Nfields]; 
	    		for(int fld=0; fld<s_Ndfields; fld++){ 
	      		qt[fld] = 0; 
	    		}

					#pragma unroll p_Np
		    	for(int m=0; m<p_Np;m++){
		      	const dfloat pm = projectMn1[nn+m*p_Np]; 
		      	for(int fld=0; fld<s_Ndfields; fld++){ 
							qt[fld] += pm*s_Q[es][fld][m];
	      		}
	    		}

	    	for(int fld=0; fld<s_Ndfields; fld++){ 	    
	    		s_QT[es][fld][nn] = s_Q[es][fld][nn] - qt[fld]; 
	      }
	    nn += p_Nq;
	  }

      }
    }
  }


   // Compute trancuated solution
    for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq;++n; @inner(0)){
	dlong e = eo+es;
	if(e<Nelements){
	  int nn = n;
	  while(nn<p_Np){
	    dfloat l2q[s_Ndfields]; 
	    dfloat l2qt[s_Ndfields];

	    for(int fld=0; fld<s_Ndfields; fld++){ 	    
	    	l2q[fld] = 0.; 
	    	l2qt[fld] = 0.; 
	    }

#pragma unroll p_Np
	    for(int m=0; m<p_Np;m++){
	      const dfloat mm = MM[nn+m*p_Np]; 
	      for(int fld=0; fld<s_Ndfields; fld++){ 
	      	l2q[fld]  += mm*s_Q[es][fld][m];
	      	l2qt[fld] += mm*s_QT[es][fld][m];
	    	}
	    }         
	    const dfloat J = vgeo[e*p_Nvgeo + p_JID];
	    for(int fld=0; fld<s_Ndfields; fld++){ 
	    	s_L2Q[es][fld][nn]  = s_Q[es][fld][nn]  * J * l2q[fld]; 
	    	s_L2QT[es][fld][nn] = s_QT[es][fld][nn] * J * l2qt[fld]; // trancuated ( q - qt)
	  	}
	    nn +=p_Nq;  
	  }
	}
      }
    }

    // reduce02(s_L2, 128);
    reduce(s_L2Q, s_L2QT, 64);
    reduce(s_L2Q, s_L2QT, 16);
    reduce(s_L2Q, s_L2QT,  8);
    reduce(s_L2Q, s_L2QT,  4);
    reduce(s_L2Q, s_L2QT,  2);
    reduce(s_L2Q, s_L2QT,  1);

     for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq; n++; @inner(0)){
	dlong e = eo+es;
	if(e<Nelements){
	  if(n<s_Ndfields){
		const dfloat sk = 0.5*log10f((float)(s_L2QT[es][n][0]/s_L2Q[es][n][0]));
		const dfloat N  = p_N; 
		// log (1/N^4)
		const dfloat s0    = -4.f*log10f( (float) (N) );	    
		const dfloat kappa = 1.0; 
  	
  	ElementList[e*s_Ndfields + n] = (sk < (s0-kappa))  ? 0: 1; 

  	// // artVisc[e*s_Ndfields + n] = 0.0; 
  	// // if(sk >=(s0-kappa) )
  	// 	artVisc[e*s_Ndfields + n] = sk; 

		if(sk<(s0-kappa))
			artVisc[e*s_Ndfields + n] = 0.f;  
		else if(sk > (s0+kappa) )
			artVisc[e*s_Ndfields + n] = 1.0; 
		else 
			artVisc[e*s_Ndfields + n] = 0.5*(1.f + sin( 0.5* M_PI*(sk-s0)/ kappa)); 



		}
	}
      }
    }

  }
}


// 
@kernel void detectPerssonTri2D(const dlong Nelements,
				    @restrict const dfloat* vgeo,
				    @restrict const dfloat * MM,
				    @restrict const dfloat * projectMn1,
				    @restrict const dfloat * Q, 
				    @restrict       dfloat *  ElementList){
#define p_Nel 1


#define reduce(s_L2, s_L2T, NT)				\
  if(NT<p_Nq){						\
    for(int es=0;es<p_Nel;++es;@inner(1)){		\
      for(int n=0; n<p_Nq; n++; @inner(0)){		\
	if(n<NT && n+NT<p_Nq){				\
	  for(int fld=0; fld<s_Ndfields; fld++){	\
	    s_L2[es][fld][n]  += s_L2[es][fld][n+NT];	\
	    s_L2T[es][fld][n] += s_L2T[es][fld][n+NT];	\
	  }						\
	}						\
      }							\
    }							\
  }

  for(dlong eo=0;eo<Nelements;eo+=p_Nel;@outer(0)){

    @shared dfloat s_Q[p_Nel][s_Ndfields][p_Np];
    @shared dfloat s_QT[p_Nel][s_Ndfields][p_Np];

    @shared dfloat s_L2Q[p_Nel][s_Ndfields][p_Np];
    @shared dfloat s_L2QT[p_Nel][s_Ndfields][p_Np];

    // prefetch global variables
    for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq; n++; @inner(0)){
				dlong e = eo+es;
  		
				int m = n + es*p_Nq;
				while(m<p_Np*p_Nel && eo*p_Np+m<Nelements*p_Np){
	  			
	  			const dlong id = m+eo*p_Np*s_Ndfields;
			  
	  			for(int fld=0; fld<s_Ndfields; fld++){ 
	    			s_Q[0][fld][m]  = Q[id + fld*p_Np];
	  			}      
	  			m += p_Nel*p_Nq;
				}
      }
    }


    // get modal coefficients and compute L2 norm
    for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq; n++; @inner(0)){

				dlong e = eo+es;
			dfloat qt[s_Ndfields]; 
			if(e<Nelements){
	  		int nn = n;

	  		while(nn<p_Np){
	    		// dfloat Qhatn[p_Nfields]; 
	    		for(int fld=0; fld<s_Ndfields; fld++){ 
	      		qt[fld] = 0; 
	    		}

					#pragma unroll p_Np
		    	for(int m=0; m<p_Np;m++){
		      	const dfloat pm = projectMn1[nn+m*p_Np]; 
		      	for(int fld=0; fld<s_Ndfields; fld++){ 
							qt[fld] += pm*s_Q[es][fld][m];
	      		}
	    		}

	    	for(int fld=0; fld<s_Ndfields; fld++){ 	    
	    		s_QT[es][fld][nn] = s_Q[es][fld][nn] - qt[fld]; 
	      }
	    nn += p_Nq;
	  }

      }
    }
  }


   // Compute trancuated solution
    for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq;++n; @inner(0)){
	dlong e = eo+es;
	if(e<Nelements){
	  int nn = n;
	  while(nn<p_Np){
	    dfloat l2q[s_Ndfields]; 
	    dfloat l2qt[s_Ndfields];

	    for(int fld=0; fld<s_Ndfields; fld++){ 	    
	    	l2q[fld] = 0.; 
	    	l2qt[fld] = 0.; 
	    }

#pragma unroll p_Np
	    for(int m=0; m<p_Np;m++){
	      const dfloat mm = MM[nn+m*p_Np]; 
	      for(int fld=0; fld<s_Ndfields; fld++){ 
	      	l2q[fld]  += mm*s_Q[es][fld][m];
	      	l2qt[fld] += mm*s_QT[es][fld][m];
	    	}
	    }         
	    const dfloat J = vgeo[e*p_Nvgeo + p_JID];
	    for(int fld=0; fld<s_Ndfields; fld++){ 
	    	s_L2Q[es][fld][nn]  = s_Q[es][fld][nn]  * J * l2q[fld]; 
	    	s_L2QT[es][fld][nn] = s_QT[es][fld][nn] * J * l2qt[fld]; // trancuated ( q - qt)
	  	}
	    nn +=p_Nq;  
	  }
	}
      }
    }

    // reduce02(s_L2, 128);
    reduce(s_L2Q, s_L2QT, 64);
    reduce(s_L2Q, s_L2QT, 16);
    reduce(s_L2Q, s_L2QT,  8);
    reduce(s_L2Q, s_L2QT,  4);
    reduce(s_L2Q, s_L2QT,  2);
    reduce(s_L2Q, s_L2QT,  1);

     for(int es=0;es<p_Nel;++es;@inner(1)){
      for(int n=0; n<p_Nq; n++; @inner(0)){
	dlong e = eo+es;
	if(e<Nelements){
	  if(n<s_Ndfields){
	    			const dfloat sk = 0.5*log10f((float)(s_L2QT[es][n][0]/s_L2Q[es][n][0]));
	    			const dfloat N = p_N; 
	    			// log (1/N^4)
	    			const dfloat s0  = -4.f*log10f( (float) (N) );	    
	    			const dfloat kappa = 1.0; 
	          ElementList[e*s_Ndfields + n] = (sk < (s0-kappa))  ? 0.0: 1.0; 
	          // ElementList[e*s_Ndfields + n] = 1; 
	  			}
				}
      }
    }

  }
}






// @kernel void detectFindNeighTri2D(const dlong Nelements,
//                                   @restrict const  dlong  *  vmapP,
//                                   @restrict dfloat *  ElementList){

//   for(dlong e=0;e<Nelements;++e;@tile(p_blockSize,@outer,@inner)){

//    for(int fld=0; fld<s_Ndfields; fld++){
//       // int fld = 0;
//       const int em_type = ElementList[e*s_Ndfields + fld];
//       int ep_type[p_Nfaces]; 
//       dlong ep_ids[p_Nfaces]; 
          
//       if(em_type==s_DGDG_TYPE){

//         int all_fv = 0, en_type = s_DGDG_TYPE; 

//         for(int f=0; f<p_Nfaces; f++){

//           // const int ep = EToE[n*p_Nfaces + f];
//           const dlong idf = e*p_Nfaces*p_Nfp + f*p_Nfp + 0; 
//           ep_ids[f]       = vmapP[idf]/p_Np;
//           ep_type[f]      =  ElementList[ep_ids[f]*s_Ndfields + fld];
        
//           if(ep_type[f] ==s_FVFV_TYPE){ 
//               en_type = s_DGFV_TYPE; 
//               all_fv +=1; 
//             }
//           }

//         if(all_fv==p_Nfaces){ en_type = s_FVFV_TYPE;}

//         // modify halo element
//         if(en_type==s_FVFV_TYPE){
//           for(int f=0; f<p_Nfaces; f++){
//             const dlong ep = ep_ids[f]; 
//             if(ep>=Nelements){
//               ElementList[ep*s_Ndfields + fld] = s_DGFV_TYPE;
//             }
//           }
//         }
               
//           // ElementList[e*s_Ndfields + fld] = en_type; 
//           ElementList[e*s_Ndfields + fld] = dfloat(en_type); 
//       }
//     }
//   }
// }




// @kernel void detectFindNeighTri2D(const dlong Nelements,
// 	                                @restrict const  dlong  *  vmapP,
// 																	@restrict dfloat *  ElementList){

//   for(dlong e=0;e<Nelements;++e;@tile(p_blockSize,@outer,@inner)){

// 	 for(int fld=0; fld<s_Ndfields; fld++){
// 			// int fld = 0;
//       const int em_type = ElementList[e*s_Ndfields + fld];
//       dlong ep_ids[p_Nfaces]; 
//       int ep_type[p_Nfaces]; 
		      
//       if(em_type==s_DGDG_TYPE){

//       	int all_fv = 0, en_type = s_DGDG_TYPE; 

//       	for(int f=0; f<p_Nfaces; f++){

//       		// const int ep = EToE[n*p_Nfaces + f];
//       		const dlong idf = e*p_Nfaces*p_Nfp + f*p_Nfp + 0; 
//       		ep_ids[f]       = vmapP[idf]/p_Np;
//       		ep_type[f]      = ElementList[ep_ids[f]*s_Ndfields + fld]; 

//       	  // const int ep_type  =  ElementList[ep*s_Ndfields + fld];
//       	  if(ep_type[f] ==s_FVFV_TYPE){ 
//       	  	en_type     = s_DGFV_TYPE; 
//       	  	all_fv +=1; 
//       	  }
//         }

//    			if(all_fv==p_Nfaces){ en_type = s_FVFV_TYPE;}  
// 					// ElementList[e*s_Ndfields + fld] = en_type; 
// 					ElementList[e*s_Ndfields + fld] = dfloat(en_type); 

// 			// // check for halopairs
// 			// 	for(int f=0; f<p_Nfaces; f++){
// 			// 		 if(ep_ids[f]>Nelements && (en_type==s_FVFV_TYPE)){
// 			// 		 		ElementList[ep_ids[f]*s_Ndfields +fld] = s_DGFV_TYPE; 
// 			// 		 }
// 			// 		 if(ep_ids[f]>Nelements && (en_type==s_DGFV_TYPE)){
// 			// 		 		ElementList[ep_ids[f]*s_Ndfields +fld] = s_DGDG_TYPE; 
// 			// 		 }
// 			// 	}
// 			}
//     }
//   }
// }









// @kernel void detectSetTypesTri2D(const dlong Nelements,
// 	                                @restrict const  dfloat  *  eflist,
// 																	@restrict dfloat *  edlist){

//   for(dlong e=0;e<Nelements;++e;@tile(p_blockSize,@outer,@inner)){

// 	 for(int fld=0; fld<s_Ndfields; fld++){

// 	 		edlist[e*s_Ndfields + fld]  = int(eflist[e*s_Ndfields + fld]);
//     }
//   }
// }

// @kernel void detectFindNeighTri2D(const dlong Nelements,
// 	                                @restrict const  dlong  *  vmapP,
// 																	@restrict dlong *  ElementList){

//   for(dlong e=0;e<Nelements;++e;@tile(p_blockSize,@outer,@inner)){

// 	 for(int fld=0; fld<s_Ndfields; fld++){
// 			// int fld = 0;
//       const int em_type = ElementList[e*s_Ndfields + fld];
//       int ep_type[p_Nfaces]; 
		      
//       if(em_type==s_DGDG_TYPE){

//       	int all_fv = 0, en_type = s_DGDG_TYPE; 

//       	for(int f=0; f<p_Nfaces; f++){

//       		// const int ep = EToE[n*p_Nfaces + f];
//       		const dlong idf = e*p_Nfaces*p_Nfp + f*p_Nfp + 0; 
//       		const int ep = vmapP[idf]/p_Np;
//       	  ep_type[f]   =  ElementList[ep*s_Ndfields + fld];
//       	  if(ep_type[f] ==s_FVFV_TYPE){ 
//       	  	en_type = s_DGFV_TYPE; 
//       	  	all_fv +=1; 
//       	  }
//         }

//    			if(all_fv==p_Nfaces){ en_type = s_FVFV_TYPE;}
					     
// 					ElementList[e*s_Ndfields + fld] = en_type; 
// 			}
//     }
//   }
// }







// @kernel void detectFindNeighTri2D(const dlong Nelements,
// 																	@restrict const int * EToE, 
// 																	@restrict dlong *  ElementList){

//   for(dlong n=0;n<Nelements;++n;@tile(p_blockSize,@outer,@inner)){

//     	 // for(int fld=0; fld<s_Ndfields; fld++){
//   				int fld = 0;
// 		      const int elmType = ElementList[n*s_Ndfields + fld];

// 		      if(elmType==s_DGDG_TYPE){
// 						int neighType = s_DGDG_TYPE; 
// 						// if any of the face is connected to FV cell, mark it
// 						int all_fv = 0; 
// 						for(int f=0; f<p_Nfaces; f++){

// 						  const int eP = EToE[n*p_Nfaces + f];

// 						  // should be fine since we never modify FVFV cell 
// 						  if(ElementList[eP*s_Ndfields + fld]==s_FVFV_TYPE)
// 						  { 
// 						    neighType = s_DGFV_TYPE; 
// 						    all_fv +=1;  
// 						  }
// 						}

// 					if(all_fv == p_Nfaces)
// 						neighType = s_FVFV_TYPE; 
					     
// 					ElementList[n*s_Ndfields + fld] = neighType; 
// 				}
//     // }
//   }
// }



