/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#ifndef p_Nvol
#define p_Nvol 1
#endif

#ifndef p_NblockV
#define p_NblockV 1
#endif




// isotropic acoustics
@kernel void acousticsVolumeTet3D_v0(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  D,
                                    @restrict const  dfloat *  q,
                                    @restrict dfloat *  rhsq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_F[p_Nfields][p_Np];
    @shared dfloat s_G[p_Nfields][p_Np];
    @shared dfloat s_H[p_Nfields][p_Np];

    for(int n=0;n<p_Np;++n;@inner(0)){

      // prefetch geometric factors (constant on triangle)
      const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
      const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
      const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
      const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
      const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
      const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
      const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
      const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
      const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

      // conseved variables
      const dlong  qbase = e*p_Np*p_Nfields + n;
      const dfloat r  = q[qbase+0*p_Np];
      const dfloat u = q[qbase+1*p_Np];
      const dfloat v = q[qbase+2*p_Np];
      const dfloat w = q[qbase+3*p_Np];

      //  \hat{div} (G*[F;G])

      {
        // F0 = u, G0 = v
        const dfloat f = -u;
        const dfloat g = -v;
        const dfloat h = -w;
        s_F[0][n] = drdx*f + drdy*g + drdz*h;
        s_G[0][n] = dsdx*f + dsdy*g + dsdz*h;
        s_H[0][n] = dtdx*f + dtdy*g + dtdz*h;
      }

      {
        const dfloat f = -r;
        const dfloat g = 0;
        const dfloat h = 0;

        s_F[1][n] = drdx*f + drdy*g + drdz*h;
        s_G[1][n] = dsdx*f + dsdy*g + dsdz*h;
        s_H[1][n] = dtdx*f + dtdy*g + dtdz*h;

      }

      {
        const dfloat f = 0;
        const dfloat g = -r;
        const dfloat h = 0;

        s_F[2][n] = drdx*f + drdy*g + drdz*h;
        s_G[2][n] = dsdx*f + dsdy*g + dsdz*h;
        s_H[2][n] = dtdx*f + dtdy*g + dtdz*h;
      }

      {
        const dfloat f = 0;
        const dfloat g = 0;
        const dfloat h = -r;

        s_F[3][n] = drdx*f + drdy*g + drdz*h;
        s_G[3][n] = dsdx*f + dsdy*g + dsdz*h;
        s_H[3][n] = dtdx*f + dtdy*g + dtdz*h;
      }

    }

    for(int n=0;n<p_Np;++n;@inner(0)){

      dfloat rhsq0 = 0, rhsq1 = 0, rhsq2 = 0, rhsq3 = 0;

      for(int i=0;i<p_Np;++i){
        const dfloat Drni = D[n+i*p_Np+0*p_Np*p_Np];
        const dfloat Dsni = D[n+i*p_Np+1*p_Np*p_Np];
        const dfloat Dtni = D[n+i*p_Np+2*p_Np*p_Np];

        rhsq0 += Drni*s_F[0][i]+Dsni*s_G[0][i]+Dtni*s_H[0][i];
        rhsq1 += Drni*s_F[1][i]+Dsni*s_G[1][i]+Dtni*s_H[1][i];
        rhsq2 += Drni*s_F[2][i]+Dsni*s_G[2][i]+Dtni*s_H[2][i];
        rhsq3 += Drni*s_F[3][i]+Dsni*s_G[3][i]+Dtni*s_H[3][i];
      }

      const dlong base = e*p_Np*p_Nfields + n;

      // move to rhs
      rhsq[base+0*p_Np] = rhsq0;
      rhsq[base+1*p_Np] = rhsq1;
      rhsq[base+2*p_Np] = rhsq2;
      rhsq[base+3*p_Np] = rhsq3;
    }
  }
}


//
@kernel void acousticsVolumeTet3D_v1(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  D,
                                    @restrict const  dfloat *  q,
                                    @restrict dfloat *  rhsq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_rho[p_Np];
    @shared dfloat s_u[p_Np];
    @shared dfloat s_v[p_Np];
    @shared dfloat s_w[p_Np];

    for(int n=0;n<p_Np;++n;@inner(0)){

      const dlong  qbase = e*p_Np*p_Nfields + n;
      s_rho[n] = q[qbase+0*p_Np];
      s_u[n] = q[qbase+1*p_Np];
      s_v[n] = q[qbase+2*p_Np];
      s_w[n] = q[qbase+3*p_Np];
    }

    for(int n=0;n<p_Np;++n;@inner(0)){

      // prefetch geometric factors (constant on triangle)
      const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
      const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
      const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
      const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
      const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
      const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
      const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
      const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
      const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];


      dfloat drhodx = 0, drhody = 0, drhodz = 0;
      dfloat dudx = 0, dvdy = 0, dwdz = 0;

      #pragma unroll p_Np
        for(int m=0;m<p_Np;++m){
          // 3 loads from L1, 4 loads from @shared, 15+6+6 flops => 0.48 flops/(L1+sh byte) FP64)
          const dfloat Drnm = D[n+m*p_Np];
          const dfloat Dsnm = D[n+m*p_Np+1*p_Np*p_Np];
          const dfloat Dtnm = D[n+m*p_Np+2*p_Np*p_Np];

          const dfloat rhom = s_rho[m];
          const dfloat um = s_u[m];
          const dfloat vm = s_v[m];
          const dfloat wm = s_w[m];

          const dfloat Dxnm = drdx*Drnm + dsdx*Dsnm + dtdx*Dtnm;
          const dfloat Dynm = drdy*Drnm + dsdy*Dsnm + dtdy*Dtnm;
          const dfloat Dznm = drdz*Drnm + dsdz*Dsnm + dtdz*Dtnm;

          drhodx += Dxnm*rhom;
          drhody += Dynm*rhom;
          drhodz += Dznm*rhom;

          dudx += Dxnm*um;
          dvdy += Dynm*vm;
          dwdz += Dznm*wm;
        }

      const dlong base = e*p_Np*p_Nfields + n;

      // move to rhs
      rhsq[base+0*p_Np] = -dudx-dvdy-dwdz;
      rhsq[base+1*p_Np] = -drhodx;
      rhsq[base+2*p_Np] = -drhody;
      rhsq[base+3*p_Np] = -drhodz;
    }
  }
}



// thread loop over elements
@kernel void acousticsVolumeTet3D_v2(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  D,
                                    @restrict const  dfloat *  q,
                                    @restrict dfloat *  rhsq){


  for(dlong eo=0;eo<Nelements;eo+=p_Nvol;@outer(0)){

    @shared dfloat s_rho[p_Nvol][p_Np];
    @shared dfloat s_u[p_Nvol][p_Np];
    @shared dfloat s_v[p_Nvol][p_Np];
    @shared dfloat s_w[p_Nvol][p_Np];

    for(int n=0;n<p_Np;++n;@inner(0)){

      #pragma unroll p_Nvol
        for(int es=0;es<p_Nvol;++es){

          const dlong e = es+eo;

          if(e<Nelements){

            const dlong  qbase = e*p_Np*p_Nfields + n;
            s_rho[es][n] = q[qbase+0*p_Np];
            s_u[es][n] = q[qbase+1*p_Np];
            s_v[es][n] = q[qbase+2*p_Np];
            s_w[es][n] = q[qbase+3*p_Np];
          }
        }
    }

    for(int n=0;n<p_Np;++n;@inner(0)){

      dfloat r_drhodr[p_Nvol], r_drhods[p_Nvol], r_drhodt[p_Nvol];
      dfloat r_dudr[p_Nvol], r_duds[p_Nvol], r_dudt[p_Nvol];
      dfloat r_dvdr[p_Nvol], r_dvds[p_Nvol], r_dvdt[p_Nvol];
      dfloat r_dwdr[p_Nvol], r_dwds[p_Nvol], r_dwdt[p_Nvol];

      for(int es=0;es<p_Nvol;++es){
        r_drhodr[es] = 0;
        r_drhods[es] = 0;
        r_drhodt[es] = 0;
        r_dudr[es] = 0; r_duds[es] = 0; r_dudt[es] = 0;
        r_dvdr[es] = 0; r_dvds[es] = 0; r_dvdt[es] = 0;
        r_dwdr[es] = 0; r_dwds[es] = 0; r_dwdt[es] = 0;
      }

      #pragma unroll p_Np
        for(int m=0;m<p_Np;++m){
          // 3 L1 loads, p_Nvol*4 sh loads, for   24*p_Nvol flops
          const dfloat Drnm = D[n+m*p_Np];
          const dfloat Dsnm = D[n+m*p_Np+1*p_Np*p_Np];
          const dfloat Dtnm = D[n+m*p_Np+2*p_Np*p_Np];

          #pragma unroll p_Nvol
            for(int es=0;es<p_Nvol;++es){
              const dfloat rhom = s_rho[es][m];
              const dfloat um = s_u[es][m];
              const dfloat vm = s_v[es][m];
              const dfloat wm = s_w[es][m];

              r_drhodr[es] += Drnm*rhom;
              r_drhods[es] += Dsnm*rhom;
              r_drhodt[es] += Dtnm*rhom;

              r_dudr[es] += Drnm*um;
              r_duds[es] += Dsnm*um;
              r_dudt[es] += Dtnm*um;

              r_dvdr[es] += Drnm*vm;
              r_dvds[es] += Dsnm*vm;
              r_dvdt[es] += Dtnm*vm;

              r_dwdr[es] += Drnm*wm;
              r_dwds[es] += Dsnm*wm;
              r_dwdt[es] += Dtnm*wm;
            }
        }

      #pragma unroll p_Nvol
        for(int es=0;es<p_Nvol;++es){

          const dlong e = es+eo;

          if(e<Nelements){
            // prefetch geometric factors (constant on triangle)
            const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
            const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
            const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
            const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
            const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
            const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
            const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
            const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
            const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

            const dlong base = e*p_Np*p_Nfields + n;

            const dfloat drhodx = drdx*r_drhodr[es] + dsdx*r_drhods[es] + dtdx*r_drhodt[es];
            const dfloat drhody = drdy*r_drhodr[es] + dsdy*r_drhods[es] + dtdy*r_drhodt[es];
            const dfloat drhodz = drdz*r_drhodr[es] + dsdz*r_drhods[es] + dtdz*r_drhodt[es];

            const dfloat dudx = drdx*r_dudr[es] + dsdx*r_duds[es] + dtdx*r_dudt[es];
            const dfloat dvdy = drdy*r_dvdr[es] + dsdy*r_dvds[es] + dtdy*r_dvdt[es];
            const dfloat dwdz = drdz*r_dwdr[es] + dsdz*r_dwds[es] + dtdz*r_dwdt[es];

            // move to rhs
            rhsq[base+0*p_Np] = -dudx-dvdy-dwdz;
            rhsq[base+1*p_Np] = -drhodx;
            rhsq[base+2*p_Np] = -drhody;
            rhsq[base+3*p_Np] = -drhodz;
          }
        }
    }
  }
}


// thread loop over elements (good)
@kernel void acousticsVolumeTet3D_v4(const dlong Nelements,
                                 @restrict const  dfloat *  vgeo,
                                 @restrict const  dfloat *  D,
                                 @restrict const  dfloat *  q,
                                 @restrict dfloat *  rhsq){



  for(dlong eo=0;eo<Nelements;eo+=(p_Nvol*p_NblockV);@outer(0)){

    @shared dfloat s_rho[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_u[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_v[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_w[p_Nvol][p_NblockV][p_Np];

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){

            const dlong e = es*p_NblockV + et + eo;

            if(e<Nelements){
	      
              const dlong  qbase = e*p_Np*p_Nfields + n;

              s_rho[es][et][n] = q[qbase+0*p_Np];
              s_u[es][et][n] = q[qbase+1*p_Np];
              s_v[es][et][n] = q[qbase+2*p_Np];
	      s_w[es][et][n] = q[qbase+3*p_Np];
            }
          }
      }
    }

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

        dfloat r_drhodr[p_Nvol], r_drhods[p_Nvol], r_drhodt[p_Nvol];
        dfloat r_dudr[p_Nvol], r_duds[p_Nvol], r_dudt[p_Nvol];
        dfloat r_dvdr[p_Nvol], r_dvds[p_Nvol], r_dvdt[p_Nvol];
        dfloat r_dwdr[p_Nvol], r_dwds[p_Nvol], r_dwdt[p_Nvol];

        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){
            r_drhodr[es] = 0;
            r_drhods[es] = 0;
            r_drhodt[es] = 0;
            r_dudr[es] = 0; r_duds[es] = 0; r_dudt[es] = 0;
            r_dvdr[es] = 0; r_dvds[es] = 0; r_dvdt[es] = 0;
            r_dwdr[es] = 0; r_dwds[es] = 0; r_dwdt[es] = 0;
          }

#pragma unroll p_Np
          for(int m=0;m<p_Np;++m){

            const dfloat Drnm = D[n+m*p_Np];
            const dfloat Dsnm = D[n+m*p_Np+1*p_Np*p_Np];
            const dfloat Dtnm = D[n+m*p_Np+2*p_Np*p_Np];

            #pragma unroll p_Nvol
              for(int es=0;es<p_Nvol;++es){
                const dfloat rhom = s_rho[es][et][m];
                const dfloat um = s_u[es][et][m];
                const dfloat vm = s_v[es][et][m];
                const dfloat wm = s_w[es][et][m];

                r_drhodr[es] += Drnm*rhom;
                r_drhods[es] += Dsnm*rhom;
                r_drhodt[es] += Dtnm*rhom;

                r_dudr[es] += Drnm*um;
                r_duds[es] += Dsnm*um;
                r_dudt[es] += Dtnm*um;

                r_dvdr[es] += Drnm*vm;
                r_dvds[es] += Dsnm*vm;
                r_dvdt[es] += Dtnm*vm;

                r_dwdr[es] += Drnm*wm;
                r_dwds[es] += Dsnm*wm;
                r_dwdt[es] += Dtnm*wm;
              }
          }

        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){

            const dlong e = es*p_NblockV + et + eo;

            if(e<Nelements){
              // prefetch geometric factors (constant on triangle)
              const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
              const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
              const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
              const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
              const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
              const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
              const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
              const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
              const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

              const dlong base = e*p_Np*p_Nfields + n;

              const dfloat drhodx = drdx*r_drhodr[es] + dsdx*r_drhods[es] + dtdx*r_drhodt[es];
              const dfloat drhody = drdy*r_drhodr[es] + dsdy*r_drhods[es] + dtdy*r_drhodt[es];
              const dfloat drhodz = drdz*r_drhodr[es] + dsdz*r_drhods[es] + dtdz*r_drhodt[es];

              const dfloat dudx = drdx*r_dudr[es] + dsdx*r_duds[es] + dtdx*r_dudt[es];
              const dfloat dvdy = drdy*r_dvdr[es] + dsdy*r_dvds[es] + dtdy*r_dvdt[es];
              const dfloat dwdz = drdz*r_dwdr[es] + dsdz*r_dwds[es] + dtdz*r_dwdt[es];

              // move to rhs
              rhsq[base+0*p_Np] = -dudx-dvdy-dwdz;
              rhsq[base+1*p_Np] = -drhodx;
              rhsq[base+2*p_Np] = -drhody;
              rhsq[base+3*p_Np] = -drhodz;
            }
          }

      }
    }
  }
}


// thread loop over elements - NblokcV = 1 - bad
@kernel void acousticsVolumeTet3D_v5(const dlong Nelements,
				  @restrict const  dfloat *  vgeo,
				  @restrict const  dfloat *  D,
				  @restrict const  dfloat *  q,
				  @restrict dfloat *  rhsq){
  


  for(dlong eo=0;eo<Nelements;eo+=(p_Nvol);@outer(0)){

    @shared dfloat s_rho[p_Nvol][p_Np];
    @shared dfloat s_u[p_Nvol][p_Np];
    @shared dfloat s_v[p_Nvol][p_Np];
    @shared dfloat s_w[p_Nvol][p_Np];

    for(int n=0;n<p_Np;++n;@inner(0)){
      
#pragma unroll p_Nvol
      for(int es=0;es<p_Nvol;++es){
	
	const dlong e = es + eo;
	
	if(e<Nelements){
	  
	  const dlong  qbase = e*p_Np*p_Nfields + n;
	  
	  s_rho[es][n] = q[qbase+0*p_Np];
	  s_u[es][n] = q[qbase+1*p_Np];
	  s_v[es][n] = q[qbase+2*p_Np];
	  s_w[es][n] = q[qbase+3*p_Np];
	}
      }
    }

    for(int n=0;n<p_Np;++n;@inner(0)){
      
      dfloat r_drhodr[p_Nvol], r_drhods[p_Nvol], r_drhodt[p_Nvol];
      dfloat r_dudr[p_Nvol], r_duds[p_Nvol], r_dudt[p_Nvol];
      dfloat r_dvdr[p_Nvol], r_dvds[p_Nvol], r_dvdt[p_Nvol];
      dfloat r_dwdr[p_Nvol], r_dwds[p_Nvol], r_dwdt[p_Nvol];
      
#pragma unroll p_Nvol
      for(int es=0;es<p_Nvol;++es){
	r_drhodr[es] = 0;
	r_drhods[es] = 0;
	r_drhodt[es] = 0;
	r_dudr[es] = 0; r_duds[es] = 0; r_dudt[es] = 0;
	r_dvdr[es] = 0; r_dvds[es] = 0; r_dvdt[es] = 0;
	r_dwdr[es] = 0; r_dwds[es] = 0; r_dwdt[es] = 0;
      }
      
#pragma unroll p_Np
      for(int m=0;m<p_Np;++m){
	
	const dfloat Drnm = D[n+m*p_Np];
	const dfloat Dsnm = D[n+m*p_Np+1*p_Np*p_Np];
	const dfloat Dtnm = D[n+m*p_Np+2*p_Np*p_Np];
	
#pragma unroll p_Nvol
	for(int es=0;es<p_Nvol;++es){
	  const dfloat rhom = s_rho[es][m];
	  const dfloat um = s_u[es][m];
	  const dfloat vm = s_v[es][m];
	  const dfloat wm = s_w[es][m];
	  
	  r_drhodr[es] += Drnm*rhom;
	  r_drhods[es] += Dsnm*rhom;
	  r_drhodt[es] += Dtnm*rhom;
	  
	  r_dudr[es] += Drnm*um;
	  r_duds[es] += Dsnm*um;
	  r_dudt[es] += Dtnm*um;
	  
	  r_dvdr[es] += Drnm*vm;
	  r_dvds[es] += Dsnm*vm;
	  r_dvdt[es] += Dtnm*vm;
	  
	  r_dwdr[es] += Drnm*wm;
	  r_dwds[es] += Dsnm*wm;
	  r_dwdt[es] += Dtnm*wm;
	}
      }
      
#pragma unroll p_Nvol
      for(int es=0;es<p_Nvol;++es){
	
	const dlong e = es + eo;
	
	if(e<Nelements){
	  // prefetch geometric factors (constant on triangle)
	  const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
	  const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
	  const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
	  const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
	  const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
	  const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
	  const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
	  const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
	  const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

	  const dlong base = e*p_Np*p_Nfields + n;

	  const dfloat drhodx = drdx*r_drhodr[es] + dsdx*r_drhods[es] + dtdx*r_drhodt[es];
	  const dfloat drhody = drdy*r_drhodr[es] + dsdy*r_drhods[es] + dtdy*r_drhodt[es];
	  const dfloat drhodz = drdz*r_drhodr[es] + dsdz*r_drhods[es] + dtdz*r_drhodt[es];

	  const dfloat dudx = drdx*r_dudr[es] + dsdx*r_duds[es] + dtdx*r_dudt[es];
	  const dfloat dvdy = drdy*r_dvdr[es] + dsdy*r_dvds[es] + dtdy*r_dvdt[es];
	  const dfloat dwdz = drdz*r_dwdr[es] + dsdz*r_dwds[es] + dtdz*r_dwdt[es];
	      
	  // move to rhs
	  rhsq[base+0*p_Np] = -dudx-dvdy-dwdz;
	  rhsq[base+1*p_Np] = -drhodx;
	  rhsq[base+2*p_Np] = -drhody;
	  rhsq[base+3*p_Np] = -drhodz;
	}
      }
    }
  }
}


// thread loop over elements (good) - TBD
@kernel void acousticsVolumeTet3D_v6(const dlong Nelements,
                                 @restrict const  dfloat *  vgeo,
                                 @restrict const  dfloat *  D,
                                 @restrict const  dfloat *  q,
                                 @restrict dfloat *  rhsq){

  for(dlong eo=0;eo<Nelements;eo+=(p_Nvol*p_NblockV);@outer(0)){

    @shared dfloat s_rho[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_u[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_v[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_w[p_Nvol][p_NblockV][p_Np];

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){

            const dlong e = es*p_NblockV + et + eo;

            if(e<Nelements){
	      
              const dlong  qbase = e*p_Np*p_Nfields + n;

              s_rho[es][et][n] = q[qbase+0*p_Np];
              s_u[es][et][n] = q[qbase+1*p_Np];
              s_v[es][et][n] = q[qbase+2*p_Np];
	      s_w[es][et][n] = q[qbase+3*p_Np];
            }
          }
      }
    }

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

        dfloat r_drhodr[p_Nvol], r_drhods[p_Nvol], r_drhodt[p_Nvol];
        dfloat r_dudr[p_Nvol], r_duds[p_Nvol], r_dudt[p_Nvol];
        dfloat r_dvdr[p_Nvol], r_dvds[p_Nvol], r_dvdt[p_Nvol];
        dfloat r_dwdr[p_Nvol], r_dwds[p_Nvol], r_dwdt[p_Nvol];

        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){
            r_drhodr[es] = 0;
            r_drhods[es] = 0;
            r_drhodt[es] = 0;
            r_dudr[es] = 0; r_duds[es] = 0; r_dudt[es] = 0;
            r_dvdr[es] = 0; r_dvds[es] = 0; r_dvdt[es] = 0;
            r_dwdr[es] = 0; r_dwds[es] = 0; r_dwdt[es] = 0;
          }

#pragma unroll p_Np
          for(int m=0;m<p_Np;++m){

            const dfloat Drnm = D[n+m*p_Np];
            const dfloat Dsnm = D[n+m*p_Np+1*p_Np*p_Np];
            const dfloat Dtnm = D[n+m*p_Np+2*p_Np*p_Np];

            #pragma unroll p_Nvol
              for(int es=0;es<p_Nvol;++es){
                const dfloat rhom = s_rho[es][et][m];
                const dfloat um = s_u[es][et][m];
                const dfloat vm = s_v[es][et][m];
                const dfloat wm = s_w[es][et][m];

                r_drhodr[es] += Drnm*rhom;
                r_drhods[es] += Dsnm*rhom;
                r_drhodt[es] += Dtnm*rhom;

                r_dudr[es] += Drnm*um;
                r_duds[es] += Dsnm*um;
                r_dudt[es] += Dtnm*um;

                r_dvdr[es] += Drnm*vm;
                r_dvds[es] += Dsnm*vm;
                r_dvdt[es] += Dtnm*vm;

                r_dwdr[es] += Drnm*wm;
                r_dwds[es] += Dsnm*wm;
                r_dwdt[es] += Dtnm*wm;
              }
          }

        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){

            const dlong e = es*p_NblockV + et + eo;

            if(e<Nelements){
              // prefetch geometric factors (constant on triangle)
              const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
              const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
              const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
              const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
              const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
              const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
              const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
              const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
              const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

              const dlong base = e*p_Np*p_Nfields + n;

              const dfloat drhodx = drdx*r_drhodr[es] + dsdx*r_drhods[es] + dtdx*r_drhodt[es];
              const dfloat drhody = drdy*r_drhodr[es] + dsdy*r_drhods[es] + dtdy*r_drhodt[es];
              const dfloat drhodz = drdz*r_drhodr[es] + dsdz*r_drhods[es] + dtdz*r_drhodt[es];

              const dfloat dudx = drdx*r_dudr[es] + dsdx*r_duds[es] + dtdx*r_dudt[es];
              const dfloat dvdy = drdy*r_dvdr[es] + dsdy*r_dvds[es] + dtdy*r_dvdt[es];
              const dfloat dwdz = drdz*r_dwdr[es] + dsdz*r_dwds[es] + dtdz*r_dwdt[es];

              // move to rhs
              rhsq[base+0*p_Np] = -dudx-dvdy-dwdz;
              rhsq[base+1*p_Np] = -drhodx;
              rhsq[base+2*p_Np] = -drhody;
              rhsq[base+3*p_Np] = -drhodz;
            }
          }

      }
    }
  }
}

// halved flops
@kernel void acousticsVolumeTet3D_v7(const dlong Nelements,
                                 @restrict const  dfloat *  vgeo,
                                 @restrict const  dfloat *  D,
                                 @restrict const  dfloat *  q,
                                 @restrict dfloat *  rhsq){

  for(dlong eo=0;eo<Nelements;eo+=(p_Nvol*p_NblockV);@outer(0)){

    @shared dfloat s_rho[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_u[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_v[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_w[p_Nvol][p_NblockV][p_Np];

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){

            const dlong e = es*p_NblockV + et + eo;

            if(e<Nelements){

              const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
              const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
              const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
              const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
              const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
              const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
              const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
              const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
              const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];


              const dlong  qbase = e*p_Np*p_Nfields + n;

	      const dfloat rho = q[qbase+0*p_Np];
	      const dfloat u = q[qbase+1*p_Np];
	      const dfloat v = q[qbase+2*p_Np];
	      const dfloat w = q[qbase+3*p_Np];
              s_rho[es][et][n] = rho;
              s_u[es][et][n] = drdx*u + drdy*v + drdz*w;
	      s_v[es][et][n] = dsdx*u + dsdy*v + dsdz*w;
	      s_w[es][et][n] = dtdx*u + dtdy*v + dtdz*w;
            }
          }
      }
    }

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

        dfloat r_drhodr[p_Nvol], r_drhods[p_Nvol], r_drhodt[p_Nvol];
        dfloat r_divU[p_Nvol];
	
        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){
            r_drhodr[es] = 0;
            r_drhods[es] = 0;
            r_drhodt[es] = 0;
            r_divU[es] = 0; 
          }

#pragma unroll p_Np
          for(int m=0;m<p_Np;++m){

            const dfloat Drnm = D[n+m*p_Np];
            const dfloat Dsnm = D[n+m*p_Np+1*p_Np*p_Np];
            const dfloat Dtnm = D[n+m*p_Np+2*p_Np*p_Np];

            #pragma unroll p_Nvol
              for(int es=0;es<p_Nvol;++es){
                const dfloat rhom = s_rho[es][et][m];
                const dfloat um = s_u[es][et][m];
                const dfloat vm = s_v[es][et][m];
                const dfloat wm = s_w[es][et][m];

                r_drhodr[es] += Drnm*rhom;
                r_drhods[es] += Dsnm*rhom;
                r_drhodt[es] += Dtnm*rhom;

                r_divU[es] += Drnm*um;
                r_divU[es] += Dsnm*vm;
                r_divU[es] += Dtnm*wm;
              }
          }
	  
        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){

            const dlong e = es*p_NblockV + et + eo;
	    
            if(e<Nelements){
              // prefetch geometric factors (constant on triangle)
              const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
              const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
              const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];
              const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
              const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
              const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];
              const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
              const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
              const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

              const dlong base = e*p_Np*p_Nfields + n;

              const dfloat drhodx = drdx*r_drhodr[es] + dsdx*r_drhods[es] + dtdx*r_drhodt[es];
              const dfloat drhody = drdy*r_drhodr[es] + dsdy*r_drhods[es] + dtdy*r_drhodt[es];
              const dfloat drhodz = drdz*r_drhodr[es] + dsdz*r_drhods[es] + dtdz*r_drhodt[es];

              // move to rhs
              rhsq[base+0*p_Np] = -r_divU[es];
              rhsq[base+1*p_Np] = -drhodx;
              rhsq[base+2*p_Np] = -drhody;
              rhsq[base+3*p_Np] = -drhodz;
            }
          }
	  
      }
    }
  }
}


#if 1
@kernel void acousticsVolumeTet3D(const dlong Nelements,
                                 @restrict const  dfloat *  vgeo,
                                 @restrict const  dfloat *  D,
                                 @restrict const  dfloat *  q,
                                 @restrict dfloat *  rhsq){

  for(dlong eo=0;eo<Nelements;eo+=(p_Nvol*p_NblockV);@outer(0)){

    @shared dfloat s_rho[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_u[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_v[p_Nvol][p_NblockV][p_Np];
    @shared dfloat s_w[p_Nvol][p_NblockV][p_Np];

    @shared dfloat s_vgeo[p_Nvol][p_NblockV][p_Nvgeo];

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

	int m = n + p_Np*et;

	// prefetch ggeo
	while(m<p_NblockV*p_Nvol*p_Nvgeo){
	  dlong id = eo*p_Nvgeo + m;
	  
	  if(id<Nelements*p_Nvgeo){
	    s_vgeo[0][0][m] = vgeo[id];
	  }
	  
	  m += p_Np*p_NblockV;	  
	}
      }

    }
    
	    
	
    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

        #pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){

            const dlong e = es*p_NblockV + et + eo;

            if(e<Nelements){
	      
              const dfloat drdx = s_vgeo[es][et][p_RXID];
              const dfloat drdy = s_vgeo[es][et][p_RYID];
              const dfloat drdz = s_vgeo[es][et][p_RZID];
              const dfloat dsdx = s_vgeo[es][et][p_SXID];
              const dfloat dsdy = s_vgeo[es][et][p_SYID];
              const dfloat dsdz = s_vgeo[es][et][p_SZID];
              const dfloat dtdx = s_vgeo[es][et][p_TXID];
              const dfloat dtdy = s_vgeo[es][et][p_TYID];
              const dfloat dtdz = s_vgeo[es][et][p_TZID];


              const dlong  qbase = e*p_Np*p_Nfields + n;

	      const dfloat rho = q[qbase+0*p_Np];
	      const dfloat u = q[qbase+1*p_Np];
	      const dfloat v = q[qbase+2*p_Np];
	      const dfloat w = q[qbase+3*p_Np];
              s_rho[es][et][n] = rho;
              s_u[es][et][n] = drdx*u + drdy*v + drdz*w;
	      s_v[es][et][n] = dsdx*u + dsdy*v + dsdz*w;
	      s_w[es][et][n] = dtdx*u + dtdy*v + dtdz*w;
            }
          }
      }
    }

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Np;++n;@inner(0)){

        dfloat r_drhodr[p_Nvol], r_drhods[p_Nvol], r_drhodt[p_Nvol];
	// separate accumulators
#if 1
	dfloat r_dudr[p_Nvol], r_dvds[p_Nvol], r_dwdt[p_Nvol];
#else
	dfloat r_divU[p_Nvol];
#endif	
	
#pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){
            r_drhodr[es] = 0;
            r_drhods[es] = 0;
            r_drhodt[es] = 0;
#if 1
	    r_dudr[es] = 0;  r_dvds[es] = 0; r_dwdt[es] = 0;
#else
            r_divU[es] = 0;
#endif
	    
          }

#pragma unroll p_Np
          for(int m=0;m<p_Np;++m){

            const dfloat Drnm = D[n+m*p_Np];
            const dfloat Dsnm = D[n+m*p_Np+1*p_Np*p_Np];
            const dfloat Dtnm = D[n+m*p_Np+2*p_Np*p_Np];

#pragma unroll p_Nvol
	    for(int es=0;es<p_Nvol;++es){
                const dfloat rhom = s_rho[es][et][m];
                const dfloat um = s_u[es][et][m];
                const dfloat vm = s_v[es][et][m];
                const dfloat wm = s_w[es][et][m];

#if 0
                r_drhodr[es] += Drnm*rhom;
		r_divU[es] += Drnm*um;
		
                r_drhods[es] += Dsnm*rhom;
		r_divU[es] += Dsnm*vm;
		
                r_drhodt[es] += Dtnm*rhom;
                r_divU[es] += Dtnm*wm;
#else
                r_drhodr[es] += Drnm*rhom;
		r_dudr[es] += Drnm*um;
		
                r_drhods[es] += Dsnm*rhom;
		r_dvds[es] += Dsnm*vm;
		
                r_drhodt[es] += Dtnm*rhom;
                r_dwdt[es] += Dtnm*wm;
#endif
	    }
          }
	  
#pragma unroll p_Nvol
          for(int es=0;es<p_Nvol;++es){
	    
            const dlong e = es*p_NblockV + et + eo;
	    
            if(e<Nelements){

              const dfloat drdx = s_vgeo[es][et][p_RXID];
              const dfloat drdy = s_vgeo[es][et][p_RYID];
              const dfloat drdz = s_vgeo[es][et][p_RZID];
              const dfloat dsdx = s_vgeo[es][et][p_SXID];
              const dfloat dsdy = s_vgeo[es][et][p_SYID];
              const dfloat dsdz = s_vgeo[es][et][p_SZID];
              const dfloat dtdx = s_vgeo[es][et][p_TXID];
              const dfloat dtdy = s_vgeo[es][et][p_TYID];
              const dfloat dtdz = s_vgeo[es][et][p_TZID];

              const dlong base = e*p_Np*p_Nfields + n;

              const dfloat drhodx = drdx*r_drhodr[es] + dsdx*r_drhods[es] + dtdx*r_drhodt[es];
              const dfloat drhody = drdy*r_drhodr[es] + dsdy*r_drhods[es] + dtdy*r_drhodt[es];
              const dfloat drhodz = drdz*r_drhodr[es] + dsdz*r_drhods[es] + dtdz*r_drhodt[es];
	      
              // move to rhs
#if 1
	      rhsq[base+0*p_Np] = -r_dudr[es]-r_dvds[es]-r_dwdt[es];
#else
              rhsq[base+0*p_Np] = -r_divU[es];
#endif
              rhsq[base+1*p_Np] = -drhodx;
              rhsq[base+2*p_Np] = -drhody;
              rhsq[base+3*p_Np] = -drhodz;
            }
          }
	  
      }
    }
  }
}
#endif


#define p_Nwarp 32


@kernel void acousticsVolumeTet3D_warp(const dlong Nelements,
				       @restrict const  dfloat *  vgeo,
				       @restrict const  dfloat *  D,
				       @restrict const  dfloat *  q,
				       @restrict dfloat *  rhsq){
  
  for(dlong eo=0;eo<Nelements;eo+=(p_Nvol*p_NblockV);@outer(0)){

    @shared dfloat s_vgeo[p_Nvol][p_NblockV][p_Nvgeo];

    for(int et=0;et<p_NblockV;++et;@inner(1)){
      for(int n=0;n<p_Nwarp;++n;@inner(0)){
	
	dfloat r_p[p_Nvol][2], r_u[p_Nvol][2], r_v[p_Nvol][2], r_w[p_Nvol][2];
	
	int m = n + p_Nwarp*et;
	
	// prefetch ggeo
	while(m<p_NblockV*p_Nvol*p_Nvgeo){
	  dlong id = eo*p_Nvgeo + m;
	  
	  if(id<Nelements*p_Nvgeo){
	    s_vgeo[0][0][m] = vgeo[id];
	  }
	  
	  m += p_Nwarp*p_NblockV;	  
	}
	
#pragma unroll p_Nvol
	for(int es=0;es<p_Nvol;++es){
	  
	  const dlong e = es*p_NblockV + et + eo;
	  
	  if(e<Nelements){
	    
	    const dfloat drdx = s_vgeo[es][et][p_RXID];
	    const dfloat drdy = s_vgeo[es][et][p_RYID];
	    const dfloat drdz = s_vgeo[es][et][p_RZID];
	    const dfloat dsdx = s_vgeo[es][et][p_SXID];
	    const dfloat dsdy = s_vgeo[es][et][p_SYID];
	    const dfloat dsdz = s_vgeo[es][et][p_SZID];
	    const dfloat dtdx = s_vgeo[es][et][p_TXID];
	    const dfloat dtdy = s_vgeo[es][et][p_TYID];
	    const dfloat dtdz = s_vgeo[es][et][p_TZID];
	    
	    dlong  qbase = e*p_Np*p_Nfields + n;

	    {
	      dfloat rho = q[qbase+0*p_Np];
	      dfloat u = q[qbase+1*p_Np];
	      dfloat v = q[qbase+2*p_Np];
	      dfloat w = q[qbase+3*p_Np];
	      r_p[es][0] = rho;
	      r_u[es][0] = drdx*u + drdy*v + drdz*w;
	      r_v[es][0] = dsdx*u + dsdy*v + dsdz*w;
	      r_w[es][0] = dtdx*u + dtdy*v + dtdz*w;
	    }
	    
	    if(n+p_Nwarp<p_Np){
	      dfloat rho = q[qbase+0*p_Np+p_Nwarp];
	      dfloat u = q[qbase+1*p_Np+p_Nwarp];
	      dfloat v = q[qbase+2*p_Np+p_Nwarp];
	      dfloat w = q[qbase+3*p_Np+p_Nwarp];
	      r_p[es][1] = rho;
	      r_u[es][1] = drdx*u + drdy*v + drdz*w;
	      r_v[es][1] = dsdx*u + dsdy*v + dsdz*w;
	      r_w[es][1] = dtdx*u + dtdy*v + dtdz*w;
	    }
	  }
	}
      
        dfloat r_drhodr[p_Nvol][2], r_drhods[p_Nvol][2], r_drhodt[p_Nvol][2];
	dfloat r_divU[p_Nvol][2];
	
#pragma unroll p_Nvol
	for(int es=0;es<p_Nvol;++es){
	  r_drhodr[es][0] = 0;
	  r_drhods[es][0] = 0;
	  r_drhodt[es][0] = 0;
	  r_divU[es][0] = 0;
	  r_drhodr[es][1] = 0;
	  r_drhods[es][1] = 0;
	  r_drhodt[es][1] = 0;
	  r_divU[es][1] = 0;
	}
	
#pragma unroll p_Np
	for(int m=0;m<p_Np;++m){
	  
	  const dfloat Drnm1 = D[n+m*p_Np];
	  const dfloat Dsnm1 = D[n+m*p_Np+1*p_Np*p_Np];
	  const dfloat Dtnm2 = D[n+m*p_Np+2*p_Np*p_Np];
	  
	  const dfloat Drnm2 = (n+p_Nwarp<p_Np) ? D[n+p_Nwarp+m*p_Np]:0;
	  const dfloat Dsnm2 = (n+p_Nwarp<p_Np) ? D[n+p_Nwarp+m*p_Np+1*p_Np*p_Np]:0;
	  const dfloat Dtnm2 = (n+p_Nwarp<p_Np) ? D[n+p_Nwarp+m*p_Np+2*p_Np*p_Np]:0;
	  
#pragma unroll p_Nvol
	  for(int es=0;es<p_Nvol;++es){
	    dfloat rhom = 0, um = 0, vm = 0, wm = 0;
	    int offset = (m<p_Nwarp) ? 0:1;
	    
	    rhom = __shfl_sync(mask, r_p[es][offset], m%p_Nwarp);
	    um   = __shfl_sync(mask, r_u[es][offset], m%p_Nwarp);
	    vm   = __shfl_sync(mask, r_v[es][offset], m%p_Nwarp);
	    wm   = __shfl_sync(mask, r_w[es][offset], m%p_Nwarp);
	    
	    r_drhodr[es][0] += Drnm1*rhom;
	    r_divU[es][0] += Drnm1*um;
	    
	    r_drhods[es][0] += Dsnm1*rhom;
	    r_divU[es][0] += Dsnm1*vm;
	    
	    r_drhodt[es][0] += Dtnm1*rhom;
	    r_divU[es][0] += Dtnm1*wm;
	    
	    if(n+p_Nwarp<p_Np){
	      r_drhodr[es][1] += Drnm2*rhom;
	      r_divU[es][1] += Drnm2*um;
	      
	      r_drhods[es][1] += Dsnm2*rhom;
	      r_divU[es][1] += Dsnm2*vm;
	      
	      r_drhodt[es][1] += Dtnm2*rhom;
	      r_divU[es][1] += Dtnm2*wm;
	    }
	  }
	}
	
#pragma unroll p_Nvol
	for(int es=0;es<p_Nvol;++es){
	  
	  const dlong e = es*p_NblockV + et + eo;
	  
	  if(e<Nelements){
	    
	    const dfloat drdx = s_vgeo[es][et][p_RXID];
	    const dfloat drdy = s_vgeo[es][et][p_RYID];
	    const dfloat drdz = s_vgeo[es][et][p_RZID];
	    const dfloat dsdx = s_vgeo[es][et][p_SXID];
	    const dfloat dsdy = s_vgeo[es][et][p_SYID];
	    const dfloat dsdz = s_vgeo[es][et][p_SZID];
	    const dfloat dtdx = s_vgeo[es][et][p_TXID];
	    const dfloat dtdy = s_vgeo[es][et][p_TYID];
	    const dfloat dtdz = s_vgeo[es][et][p_TZID];
	    
	    const dlong base = e*p_Np*p_Nfields + n;
	    
	    const dfloat drhodx1 = drdx*r_drhodr[es][0] + dsdx*r_drhods[es][0] + dtdx*r_drhodt[es][0];
	    const dfloat drhody1 = drdy*r_drhodr[es][0] + dsdy*r_drhods[es][0] + dtdy*r_drhodt[es][0];
	    const dfloat drhodz1 = drdz*r_drhodr[es][0] + dsdz*r_drhods[es][0] + dtdz*r_drhodt[es][0];
	    
	    // move to rhs
	    rhsq[base+0*p_Np] = -r_divU[es][0];
	    rhsq[base+1*p_Np] = -drhodx1;
	    rhsq[base+2*p_Np] = -drhody1;
	    rhsq[base+3*p_Np] = -drhodz1;
	    if(n+p_Nwarp<p_Np){
	      const dfloat drhodx2 = drdx*r_drhodr[es][1] + dsdx*r_drhods[es][1] + dtdx*r_drhodt[es][1];
	      const dfloat drhody2 = drdy*r_drhodr[es][1] + dsdy*r_drhods[es][1] + dtdy*r_drhodt[es][1];
	      const dfloat drhodz2 = drdz*r_drhodr[es][1] + dsdz*r_drhods[es][1] + dtdz*r_drhodt[es][1];
	      
	      // move to rhs
	      rhsq[base+0*p_Np+p_Nwarp] = -r_divU[es][1];
	      rhsq[base+1*p_Np+p_Nwarp] = -drhodx2;
	      rhsq[base+2*p_Np+p_Nwarp] = -drhody2;
	      rhsq[base+3*p_Np+p_Nwarp] = -drhodz2;
	    }
	  }
	}
      }
    }
  }
}



