/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// hex @kernel for screened coulomb potential mat-vec
#define lineThreads                           \
      for(int i=0; i<p_Nq; ++i; @inner(0))

#if dfloatSize==4
#define ellipticAxLine1D ellipticAxFloatLine1D
#else
#define ellipticAxLine1D ellipticAxDoubleLine1D
#endif


@kernel void ellipticAxLine1Dv1(const dlong   Nelements,
			      @restrict const  dlong   *  GlobalToLocal,
                               @restrict const  dfloat *  wJ,
                               @restrict const  dfloat *  ggeo,
                               @restrict const  dfloat *  DT,
                               @restrict const  dfloat *  S,
                               @restrict const  dfloat *  MM,
                               const dfloat   lambda,
                               @restrict const  dfloat *  q,
                               @restrict dfloat *  Aq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_q[p_Nq];
    @shared dfloat s_DT[p_Nq][p_Nq];

    @exclusive dfloat r_qr, r_Aq;
    @exclusive dfloat r_G00, r_GwJ;

    @exclusive dlong gid;
    
    // prefetch q(:,:,:,e) to @shared
    lineThreads{
      const dlong base = i  + e*p_Np;
      gid = GlobalToLocal[base];
      s_q[i] = (gid!=-1) ? q[gid] : 0.0;

      // fetch DT to @shared
      for(int j=0;j<p_Nq;++j)
	s_DT[j][i] = DT[j*p_Nq+i];
    }


    lineThreads{
      const dlong base = e*p_Nggeo*p_Np + i;

      // assumes w*J built into G entries
      r_GwJ = wJ[e*p_Np + i];

      r_G00 = ggeo[base+p_G00ID*p_Np];

      dfloat qr = 0.f;

      #pragma unroll p_Nq
        for(int n=0; n<p_Nq; ++n){
          qr += s_DT[i][n]*s_q[n];
        }

	r_qr = qr; 

      r_Aq = r_GwJ*lambda*s_q[i];
    }

    // r term ----->

    lineThreads{
      s_q[i] = r_G00*r_qr;
    }


    lineThreads{
      dfloat tmp = 0.f;
      #pragma unroll p_Nq
        for(int n=0;n<p_Nq;++n) {
          tmp += s_DT[n][i]*s_q[n];
        }

      r_Aq += tmp;
      if(gid>=0){
	@atomic Aq[gid] += r_Aq;
      }
    }
  }
}


@kernel void ellipticAxLine1D(const dlong   Nelements,
			      @restrict const  dlong   *  GlobalToLocal,
			      @restrict const  dfloat *  wJ,
			      @restrict const  dfloat *  ggeo,
			      @restrict const  dfloat *  DT,
			      @restrict const  dfloat *  S,
			      @restrict const  dfloat *  MM,
			      const dfloat   lambda,
			      @restrict const  dfloat *  q,
			      @restrict dfloat *  Aq){
  
#define p_T 128
#define p_Nsub p_T/p_Nq
  
  for(dlong ebase=0;ebase<Nelements;ebase+=p_Nsub;@outer(0)){

    @shared dfloat s_q[p_Nsub][p_Nq];
    @shared dfloat s_DT[p_Nq][p_Nq];
    
    @exclusive dfloat r_qr, r_Aq;
    @exclusive dfloat r_G00, r_GwJ;
    
    @exclusive dlong gid, element;
    
    // prefetch q(:,:,:,e) to @shared
    for(int es=0;es<p_Nsub;++es;@inner(1)){
      for(int i=0; i<p_Nq; ++i; @inner(0)){
	
	dlong e = ebase + es;
	gid = -1;	

	element = (e<Nelements) ? e:-1;
	if(element>=0){
	  const dlong base = i  + element*p_Np;
	  gid = GlobalToLocal[base];
	  s_q[es][i] = (gid!=-1) ? q[gid] : 0.0;
	}
	
	// fetch DT to @shared
	int j = es;
	while(j<p_Nq){
	  s_DT[j][i] = DT[j*p_Nq+i];
	  j += p_Nsub;
	}
      }
    }
    
    for(int es=0;es<p_Nsub;++es;@inner(1)){
      for(int i=0; i<p_Nq; ++i; @inner(0)){    
	
	if(element>=0){
	  const dlong base = element*p_Nggeo*p_Np + i;
	  
	  // assumes w*J built into G entries
	  r_GwJ = wJ[element*p_Np + i];
	  
	  r_G00 = ggeo[base+p_G00ID*p_Np];
	  
	  dfloat qr = 0.f;
	  
#pragma unroll p_Nq
	  for(int n=0; n<p_Nq; ++n){
	    qr += s_DT[i][n]*s_q[es][n];
	  }
	  
	  r_qr = qr; 
	  
	  r_Aq = r_GwJ*lambda*s_q[es][i];
	}
      }
    }

    // r term ----->
    for(int es=0;es<p_Nsub;++es;@inner(1)){
      for(int i=0; i<p_Nq; ++i; @inner(0)){    
	s_q[es][i] = r_G00*r_qr;
      }
    }

    for(int es=0;es<p_Nsub;++es;@inner(1)){
      for(int i=0; i<p_Nq; ++i; @inner(0)){

	dfloat tmp = 0.f;
#pragma unroll p_Nq
        for(int n=0;n<p_Nq;++n) {
          tmp += s_DT[n][i]*s_q[es][n];
        }
	
	if(element>=0){
	  r_Aq += tmp;
	  if(gid>=0){
	    @atomic Aq[gid] += r_Aq;
	  }
	}
      }
    }
  }
}



// line thread version
@kernel void ellipticPartialAxLine1Dv0(const dlong Nelements,
                                   @restrict const  dlong   *  elementList,
                                   @restrict const  dlong   *  GlobalToLocal,
                                   @restrict const  dfloat *  wJ,
                                   @restrict const  dfloat *  ggeo,
                                   @restrict const  dfloat *  DT,
                                   @restrict const  dfloat *  S,
                                   @restrict const  dfloat *  MM,
                                   const dfloat   lambda,
                                   @restrict const  dfloat *  q,
                                   @restrict dfloat *  Aq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_q[p_Nq];
    @shared dfloat s_DT[p_Nq][p_Nq];

    @exclusive dlong element;
    @exclusive dfloat r_qr, r_Aq;
    @exclusive dfloat r_G00, r_GwJ;

    // prefetch q(:,:,:,e) to @shared
    lineThreads{
      element = elementList[e];
      const dlong base = i + element*p_Np;
      const dlong id = GlobalToLocal[base];
      s_q[i] = (id!=-1) ? q[id] : 0.0;

      // fetch DT to @shared
      for(int j=0;j<p_Nq;++j)
	s_DT[j][i] = DT[j*p_Nq+i];
    }


    lineThreads{

      const dlong base = element*p_Nggeo*p_Np + i;

      // assumes w*J built into G entries
      r_GwJ = wJ[element*p_Np +  i];

      r_G00 = ggeo[base+p_G00ID*p_Np];

      dfloat qr = 0.f;

      #pragma unroll p_Nq
        for(int n=0; n<p_Nq; ++n){
          qr += s_DT[i][n]*s_q[n];
        }

	r_qr = qr; 

      r_Aq = r_GwJ*lambda*s_q[i];
    }

    // r term ----->

    lineThreads{
      s_q[i] = r_G00*r_qr;
    }


    lineThreads{
      dfloat tmp = 0.f;
      #pragma unroll p_Nq
        for(int n=0;n<p_Nq;++n) {
          tmp += s_DT[n][i]*s_q[n];
        }

      r_Aq += tmp;

      const dlong base = element*p_Np +  i;
      Aq[base] = r_Aq;
    }
  }
}



// line thread version
@kernel void ellipticPartialAxLine1D(const dlong Nelements,
                                   @restrict const  dlong   *  elementList,
                                   @restrict const  dlong   *  GlobalToLocal,
                                   @restrict const  dfloat *  wJ,
                                   @restrict const  dfloat *  ggeo,
                                   @restrict const  dfloat *  DT,
                                   @restrict const  dfloat *  S,
                                   @restrict const  dfloat *  MM,
                                   const dfloat   lambda,
                                   @restrict const  dfloat *  q,
                                   @restrict dfloat *  Aq){


#define p_T 128
#define p_Nsub p_T/p_Nq
  
  for(dlong ebase=0;ebase<Nelements;ebase+=p_Nsub;@outer(0)){

    @shared dfloat s_q[p_Nsub][p_Nq];
    @shared dfloat s_DT[p_Nq][p_Nq];

    @exclusive dlong element;
    @exclusive dfloat r_qr, r_Aq;
    @exclusive dfloat r_G00, r_GwJ;

    // prefetch q(:,:,:,e) to @shared
    for(int es=0;es<p_Nsub;++es;@inner(1)){
      for(int i=0; i<p_Nq; ++i; @inner(0)){

	dlong e = ebase + es;
	
	element = (e<Nelements) ? elementList[e]:-1;

	if(element>=0){
	  const dlong base = i + element*p_Np;
	  const dlong id = GlobalToLocal[base];
	  s_q[es][i] = (id!=-1) ? q[id] : 0.0;
	}

	// fetch DT to @shared
	int j = es;
	while(j<p_Nq){
	  s_DT[j][i] = DT[j*p_Nq+i];
	  j+=p_Nsub;
	}
      }
    }
    
    
    for(int es=0;es<p_Nsub;++es;@inner(1)){
      for(int i=0; i<p_Nq; ++i; @inner(0)){
	
	if(element>=0){
	  const dlong base = element*p_Nggeo*p_Np + i;
	  
	  // assumes w*J built into G entries
	  r_GwJ = wJ[element*p_Np +  i];
	  
	  r_G00 = ggeo[base+p_G00ID*p_Np];
	  
	  dfloat qr = 0.f;
	  
#pragma unroll p_Nq
	  for(int n=0; n<p_Nq; ++n){
	    qr += s_DT[i][n]*s_q[es][n];
	  }
	  
	  r_qr = qr; 
	  
	  r_Aq = r_GwJ*lambda*s_q[es][i];
	}
      }
    }

    // r term ----->
    
    for(int es=0;es<p_Nsub;++es;@inner(1)){
      for(int i=0; i<p_Nq; ++i; @inner(0)){
	s_q[es][i] = r_G00*r_qr;
      }
    }

    for(int es=0;es<p_Nsub;++es;@inner(1)){
      for(int i=0; i<p_Nq; ++i; @inner(0)){
	if(element>=0){
	  dfloat tmp = 0.f;
#pragma unroll p_Nq
	  for(int n=0;n<p_Nq;++n) {
	    tmp += s_DT[n][i]*s_q[es][n];
	  }
	  
	  r_Aq += tmp;
	  
	  const dlong base = element*p_Np +  i;
	  Aq[base] = r_Aq;
	}
      }
    }
  }
}

