/*

  The MIT License (MIT)

  Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


// complex frequency shift version
// TW this one
@kernel void maxwellCubatureCfsPmlTermsTri2D(const dlong Npmlelements,
					     @restrict const  dlong *  pmlElementIds,
					     @restrict const  dlong *  pmlIds,
					     @restrict const  dfloat * cubPmlSigma,
					     @restrict const  dfloat * cubPmlBeta,
					     @restrict const  dfloat * cubInterp, // interpolate to cubature nodes	
					     @restrict const  dfloat * cubProject, // project from cubature to interpolation nodes
					     @restrict const  dfloat * q,
					     @restrict const  dfloat * pmlq,
					     @restrict        dfloat * rhsq,
					     @restrict        dfloat * rhspmlq){
  
  // for all elements
  for(dlong e=0;e<Npmlelements;++e;@outer(0)){

    // reduces shared storage by processing one face at a time
    @shared dfloat s_Hx[p_cubMaxNp];
    @shared dfloat s_Hy[p_cubMaxNp];
    @shared dfloat s_Hz[p_cubMaxNp];
    @shared dfloat s_Ex[p_cubMaxNp];
    @shared dfloat s_Ey[p_cubMaxNp];
    @shared dfloat s_Ez[p_cubMaxNp];
    @shared dfloat s_Exy[p_cubMaxNp];
    @shared dfloat s_Exz[p_cubMaxNp];
    @shared dfloat s_Eyx[p_cubMaxNp];
    @shared dfloat s_Eyz[p_cubMaxNp];
    @shared dfloat s_Ezy[p_cubMaxNp];
    @shared dfloat s_Ezx[p_cubMaxNp];
    @shared dfloat s_Hzx[p_cubMaxNp];
    @shared dfloat s_Hzy[p_cubMaxNp];
    @shared dfloat s_Hyx[p_cubMaxNp];
    @shared dfloat s_Hyz[p_cubMaxNp];
    @shared dfloat s_Hxy[p_cubMaxNp];
    @shared dfloat s_Hxz[p_cubMaxNp];

    @exclusive dlong element, pmlElement;

    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
	element = pmlElementIds[e];
	pmlElement = pmlIds[e];
	if(n<p_Np){
	  const dlong base    =    element*p_Np*p_Nfields    + n;
	  const dlong pmlbase = pmlElement*p_Np*p_Npmlfields + n;
	  
	  s_Hx[es][n]  = q[base+0*p_Np];
	  s_Hy[es][n]  = q[base+1*p_Np];
	  s_Hz[es][n]  = q[base+2*p_Np];
	  s_Ex[es][n]  = q[base+3*p_Np];
	  s_Ey[es][n]  = q[base+4*p_Np];
	  s_Ez[es][n]  = q[base+5*p_Np];
	  s_Hxy[es][n] = pmlq[pmlbase+0*p_Np];
	  s_Hxz[es][n] = pmlq[pmlbase+1*p_Np];
	  s_Hyx[es][n] = pmlq[pmlbase+2*p_Np];
	  s_Hyz[es][n] = pmlq[pmlbase+3*p_Np];
	  s_Hzx[es][n] = pmlq[pmlbase+4*p_Np];
	  s_Hzy[es][n] = pmlq[pmlbase+5*p_Np];
	  s_Exy[es][n] = pmlq[pmlbase+6*p_Np];
	  s_Exz[es][n] = pmlq[pmlbase+7*p_Np];
	  s_Eyx[es][n] = pmlq[pmlbase+8*p_Np];
	  s_Eyz[es][n] = pmlq[pmlbase+9*p_Np];
	  s_Ezy[es][n] = pmlq[pmlbase+10*p_Np];
	  s_Ezx[es][n] = pmlq[pmlbase+11*p_Np];	    
	}
      }
    }
  }

  @exclusive dfloat cubHx, cubHy, cubHz;
  @exclusive dfloat cubEx, cubEy, cubEz;
  @exclusive dfloat cubHxy, cubHxz, cubHyx, cubHyz, cubHzx, cubHzy;
  @exclusive dfloat cubExy, cubExz, cubEyx, cubEyz, cubEzx, cubEzy;

  for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
      
    cubHx = 0; cubHxy = 0; cubHxz = 0;
    cubHy = 0; cubHyx = 0; cubHyz = 0;
    cubHz = 0; cubHzx = 0; cubHzy = 0;
    cubEx = 0; cubExy = 0; cubExz = 0;
    cubEy = 0; cubEyx = 0; cubEyz = 0;
#endif
	
#pragma unroll p_Np
    for(int m=0;m<p_Np;++m){
      cubHx  += cInm*s_Hx[es][m];
      cubHy  += cInm*s_Hy[es][m];
      cubHz  += cInm*s_Hz[es][m];
      cubEx  += cInm*s_Ex[es][m];
      cubEy  += cInm*s_Ey[es][m];
      cubEz  += cInm*s_Ez[es][m];

      cubHxy += cInm*s_Hxy[es][m];
      cubHxz += cInm*s_Hxz[es][m];
      cubHyx += cInm*s_Hyx[es][m];
      cubHyz += cInm*s_Hyz[es][m];
      cubHzx += cInm*s_Hyx[es][m];
      cubHzy += cInm*s_Hzy[es][m];
      cubHyx += cInm*s_Hyx[es][m];

      cubExy += cInm*s_Exy[es][m];
      cubExz += cInm*s_Exz[es][m];
      cubEyx += cInm*s_Eyx[es][m];
      cubEyz += cInm*s_Eyz[es][m];
      cubEzx += cInm*s_Eyx[es][m];
      cubEzy += cInm*s_Ezy[es][m];
    }
  }
    
  for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
    
    dlong sbase = p_dim*pmlElement*p_cubNp + n;
    dfloat cubSigmaX = cubPmlSigma[sbase + 0*p_cubNp];
    dfloat cubSigmaY = cubPmlSigma[sbase + 1*p_cubNp];
    dfloat cubSigmaZ = cubPmlSigma[sbase + 2*p_cubNp];	  
    dfloat cubBetaX  = cubPmlBeta[sbase + 0*p_cubNp];
    dfloat cubBetaY  = cubPmlBeta[sbase + 1*p_cubNp];
    dfloat cubBetaZ  = cubPmlBeta[sbase + 2*p_cubNp];
	
    // check signs
    s_Hx[es][n]  =  cubSigmaY*cubEzy - cubSigmaZ*cubEyz;
    s_Hy[es][n]  =  cubSigmaZ*cubEzx - cubSigmaX*cubExz;
    s_Hz[es][n]  =  cubSigmaX*cubEyx - cubSigmaY*cubExy;
    s_Ex[es][n]  = -cubSigmaY*cubHzy + cubSigmaZ*cubHyz;
    s_Ey[es][n]  = -cubSigmaZ*cubHzx + cubSigmaX*cubHxz;
    s_Ez[es][n]  = -cubSigmaX*cubHyx + cubSigmaY*cubHxy;
	
    s_Hxy[es][n] = -cubBetaY*cubHxy;
    s_Hyx[es][n] = -cubBetaX*cubHyx;
    s_Ezx[es][n] = -cubBetaX*cubEzx;
    s_Ezy[es][n] = -cubBetaY*cubEzy;
  }
  
  for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
    if(n<p_Np){
	
      const dlong base    =    element*p_Np*p_Nfields   +n;
      const dlong pmlbase = pmlElement*p_Np*p_Npmlfields+n;
	
      dfloat rhsHx = 0, rhsHxy = 0;
      dfloat rhsHy = 0, rhsHyx = 0;
      dfloat rhsEz = 0, rhsEzx = 0, rhsEzy = 0;
	
      for(int m=0;m<p_cubNp;++m){
	const dfloat cPnm = cubProject[n+m*p_Np];
	rhsHx  += cPnm*s_Hx[es][m];
	rhsHy  += cPnm*s_Hy[es][m];
	rhsEz  += cPnm*s_Ez[es][m];
	rhsHxy += cPnm*s_Hxy[es][m];
	rhsHyx += cPnm*s_Hyx[es][m];
	rhsEzx += cPnm*s_Ezx[es][m];
	rhsEzy += cPnm*s_Ezy[es][m];
      }
	
      rhsq[base+0*p_Np] += rhsHx;
      rhsq[base+1*p_Np] += rhsHy;
      rhsq[base+2*p_Np] += rhsEz;
	
      rhspmlq[pmlbase+0*p_Np] += rhsHxy;
      rhspmlq[pmlbase+1*p_Np] += rhsHyx;
      rhspmlq[pmlbase+2*p_Np] += rhsEzx;
      rhspmlq[pmlbase+3*p_Np] += rhsEzy;
    }
  }
}

