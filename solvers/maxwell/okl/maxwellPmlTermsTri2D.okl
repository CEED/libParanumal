/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// Efficient and stable perfectly matched layer for CEM
// Kenneth Duru, Gunilla Kreiss 
// see: https://doi.org/10.1016/j.apnum.2013.09.005 

@kernel void maxwellCubaturePmlTermsTri2D(const dlong Npmlelements,
					  @restrict const  dlong *  pmlElementIds,
					  @restrict const  dlong *  pmlIds,
					  @restrict const  dfloat * cubPmlSigma,
					  @restrict const  dfloat * cubPmlKappa,
					  @restrict const  dfloat * cubInterp, // interpolate to cubature nodes	
					  @restrict const  dfloat * cubProject, // project from cubature to interpolation nodes
					  @restrict const  dfloat * q,
					  @restrict const  dfloat * pmlq,
					  @restrict        dfloat * rhsq,
					  @restrict        dfloat * rhspmlq){
  
  // for all elements
  for(dlong eo=0;eo<Npmlelements;eo+=p_NblockC;@outer(0)){

    // reduces shared storage by processing one face at a time
    @shared dfloat s_Hx[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Hy[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Ez[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Wz[p_NblockC][p_cubMaxNp];

#define USE_ORIGINAL_SCALING 0
    
#if USE_ORIGINAL_SCALING==1
    @shared dfloat s_rhsWz[p_NblockC][p_cubMaxNp];
#endif
    
    @exclusive dlong r_e, element, pmlElement;

    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
	r_e = eo + es;
	if(r_e<Npmlelements){
	  element = pmlElementIds[r_e];
	  pmlElement = pmlIds[r_e];
	  if(n<p_Np){
	    const dlong base    =    element*p_Np*p_Nfields    + n;
	    const dlong pmlbase = pmlElement*p_Np*p_Npmlfields + n;
	    
	    s_Hx[es][n] = q[base+0*p_Np];
	    s_Hy[es][n] = q[base+1*p_Np];
	    s_Ez[es][n] = q[base+2*p_Np];
	    s_Wz[es][n] = pmlq[pmlbase+0*p_Np];
#if USE_ORIGINAL_SCALING==1
	    s_rhsWz[es][n] = rhspmlq[pmlbase+0*p_Np];
#endif
	  }
	}
      }
    }

    @exclusive dfloat cubHx, cubHy, cubEz, cubWz, cubRhsWz;
    
    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){

	if(r_e<Npmlelements){
	  
	  cubHx = 0; cubHy = 0; cubEz = 0; cubWz = 0;
#if USE_ORIGINAL_SCALING==1
	  cubRhsWz = 0;
#endif
	  
#pragma unroll p_Np
	  for(int m=0;m<p_Np;++m){
	    dfloat cInm = cubInterp[n+m*p_cubNp];
	    cubHx += cInm*s_Hx[es][m];
	    cubHy += cInm*s_Hy[es][m];
	    cubEz += cInm*s_Ez[es][m];
	    cubWz += cInm*s_Wz[es][m];
#if USE_ORIGINAL_SCALING==1
	    cubRhsWz += cInm*s_rhsWz[es][m];
#endif
	  }
	}
      }
    }
    
    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){

	if(r_e<Npmlelements){
	  dfloat cubSigmaX = cubPmlSigma[p_dim*pmlElement*p_cubNp + n + 0*p_cubNp];
	  dfloat cubSigmaY = cubPmlSigma[p_dim*pmlElement*p_cubNp + n + 1*p_cubNp];

#define p_pmlAlpha 0.0
	  
          const dfloat modSigmaX = cubSigmaX + p_pmlAlpha*cubSigmaY;
          const dfloat modSigmaY = cubSigmaY + p_pmlAlpha*cubSigmaX;

	  cubSigmaX = modSigmaX;
	  cubSigmaY = modSigmaY;
	  
	  // now use these for RHS 
	  s_Hx[es][n] = -cubSigmaY*cubHx;
	  s_Hy[es][n] = -cubSigmaX*cubHy;

#if USE_ORIGINAL_SCALING==1
	  s_Wz[es][n] = -cubSigmaY*cubWz + (cubSigmaY-cubSigmaX)*cubRhsWz;
	  s_Ez[es][n] = -cubSigmaX*cubEz;
#else
	  // rescale Wz by (1/(cubSigmaY-cubSigmaX))
	  s_Ez[es][n] = -cubSigmaX*cubEz + (cubSigmaY-cubSigmaX)*cubWz;
	  s_Wz[es][n] = -cubSigmaY*cubWz; // + cubRhsWz;
#endif
	}
      }
    }
    
    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
	if(n<p_Np && r_e<Npmlelements){

	  const dlong base    =    element*p_Np*p_Nfields   +n;
	  const dlong pmlbase = pmlElement*p_Np*p_Npmlfields+n;

	  dfloat rhsHx = 0;
	  dfloat rhsHy = 0;
#if USE_ORIGINAL_SCALING==1
	  dfloat rhsWz = 0;
	  dfloat rhsEz = pmlq[pmlbase]; // curl H + Wz
#else
	  // rescale Wz by (1/(cubSigmaY-cubSigmaX))
	  dfloat rhsEz = 0;
	  dfloat rhsWz = 0;
#endif

	  
	  for(int m=0;m<p_cubNp;++m){
	    const dfloat cPnm = cubProject[n+m*p_Np];
	    rhsHx += cPnm*s_Hx[es][m];
	    rhsHy += cPnm*s_Hy[es][m];
	    rhsEz += cPnm*s_Ez[es][m];
	    rhsWz += cPnm*s_Wz[es][m];
	  }

	  rhsq[base+0*p_Np] += rhsHx;
	  rhsq[base+1*p_Np] += rhsHy;
	  rhsq[base+2*p_Np] += rhsEz;
#if USE_ORIGINAL_SCALING==1
	  rhspmlq[pmlbase+0*p_Np] = rhsWz;
#else
	  rhspmlq[pmlbase+0*p_Np] += rhsWz;
#endif
        }
      }
    }
  }
}

// complex frequency shift version
// TW this one
@kernel void maxwellCubatureCfsPmlTermsTri2D(const dlong Npmlelements,
					     @restrict const  dlong *  pmlElementIds,
					     @restrict const  dlong *  pmlIds,
					     @restrict const  dfloat * cubPmlSigma,
					     @restrict const  dfloat * cubPmlBeta,
					     @restrict const  dfloat * cubInterp, // interpolate to cubature nodes	
					     @restrict const  dfloat * cubProject, // project from cubature to interpolation nodes
					     @restrict const  dfloat * q,
					     @restrict const  dfloat * pmlq,
					     @restrict        dfloat * rhsq,
					     @restrict        dfloat * rhspmlq){
  
  // for all elements
  for(dlong eo=0;eo<Npmlelements;eo+=p_NblockC;@outer(0)){

    // reduces shared storage by processing one face at a time
    @shared dfloat s_Hx[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Hy[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Ez[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Ezy[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Ezx[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Hyx[p_NblockC][p_cubMaxNp];
    @shared dfloat s_Hxy[p_NblockC][p_cubMaxNp];

#define USE_ORIGINAL_SCALING 0
    
#if USE_ORIGINAL_SCALING==1
    @shared dfloat s_rhsEzy[p_NblockC][p_cubMaxNp];
    @shared dfloat s_rhsEzx[p_NblockC][p_cubMaxNp];
    @shared dfloat s_rhsHyx[p_NblockC][p_cubMaxNp];
    @shared dfloat s_rhsHxy[p_NblockC][p_cubMaxNp];
#endif
    
    @exclusive dlong r_e, element, pmlElement;

    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
	r_e = eo + es;
	if(r_e<Npmlelements){
	  element = pmlElementIds[r_e];
	  pmlElement = pmlIds[r_e];
	  if(n<p_Np){
	    const dlong base    =    element*p_Np*p_Nfields    + n;
	    const dlong pmlbase = pmlElement*p_Np*p_Npmlfields + n;
	    
	    s_Hx[es][n]  = q[base+0*p_Np];
	    s_Hy[es][n]  = q[base+1*p_Np];
	    s_Ez[es][n]  = q[base+2*p_Np];
	    s_Hxy[es][n] = pmlq[pmlbase+0*p_Np];
	    s_Hyx[es][n] = pmlq[pmlbase+1*p_Np];
	    s_Ezx[es][n] = pmlq[pmlbase+2*p_Np];
	    s_Ezy[es][n] = pmlq[pmlbase+3*p_Np];
#if USE_ORIGINAL_SCALING==1
	    s_rhsHxy[es][n] = rhspmlq[pmlbase+0*p_Np];
	    s_rhsHyx[es][n] = rhspmlq[pmlbase+1*p_Np];
	    s_rhsEzx[es][n] = rhspmlq[pmlbase+2*p_Np];
	    s_rhsEzy[es][n] = rhspmlq[pmlbase+3*p_Np];
#endif
	  }
	}
      }
    }

    @exclusive dfloat cubHx, cubHy, cubEz, cubHxy, cubHyx, cubEzx, cubEzy;
#if USE_ORIGINAL_SCALING==1
    @exclusive dfloat cubrhsHxy, cubrhsHyx, cubrhsEzx, cubrhsEzy;
#endif
    
    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){

	cubHx = 0; cubHxy = 0; 
	cubHy = 0; cubHyx = 0; 
	cubEz = 0; cubEzx = 0; cubEzy = 0;
	
#if USE_ORIGINAL_SCALING==1
	cubrhsHxy = 0; cubrhsHyx = 0;
	cubrhsEzx = 0; cubrhsEzy = 0;
#endif
	
#pragma unroll p_Np
	for(int m=0;m<p_Np;++m){
	  dfloat cInm = cubInterp[n+m*p_cubNp];
	  cubHx  += cInm*s_Hx[es][m];
	  cubHy  += cInm*s_Hy[es][m];
	  cubEz  += cInm*s_Ez[es][m];
	  cubHxy += cInm*s_Hxy[es][m];
	  cubHyx += cInm*s_Hyx[es][m];
	  cubEzx += cInm*s_Ezx[es][m];
	  cubEzy += cInm*s_Ezy[es][m];
#if USE_ORIGINAL_SCALING==1
	  cubrhsHxy += cInm*s_rhsHxy[es][m];
	  cubrhsHyx += cInm*s_rhsHyx[es][m];
	  cubrhsEzx += cInm*s_rhsEzx[es][m];
	  cubrhsEzy += cInm*s_rhsEzy[es][m];
#endif
	}
      }
    }
    
    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){

	if(r_e<Npmlelements){
	  dlong sbase = p_dim*pmlElement*p_cubNp + n;
	  dfloat cubSigmaX = cubPmlSigma[sbase + 0*p_cubNp];
	  dfloat cubSigmaY = cubPmlSigma[sbase + 1*p_cubNp];
	  dfloat cubBetaX  = cubPmlBeta[sbase + 0*p_cubNp];
	  dfloat cubBetaY  = cubPmlBeta[sbase + 1*p_cubNp];

	  //	  printf("cubSig=%f,%f cubBeta=%f,%f\n",
	  //	 cubSigmaX, cubSigmaY, cubBetaX, cubBetaY);
	  
#if USE_ORIGINAL_SCALING==1
	  s_Hx[es][n]  = +cubEzy;
	  s_Hy[es][n]  = -cubEzx;
	  s_Ez[es][n]  = -cubHyx + cubHxy;
	  
	  s_Hxy[es][n] = cubSigmaY*cubrhsHxy - cubBetaY*cubHxy;
	  s_Hyx[es][n] = cubSigmaX*cubrhsHyx - cubBetaX*cubHyx;
	  s_Ezx[es][n] = cubSigmaX*cubrhsEzx - cubBetaX*cubEzx;
	  s_Ezy[es][n] = cubSigmaY*cubrhsEzy - cubBetaY*cubEzy;
#else
	  s_Hx[es][n]  =  cubSigmaY*cubEzy;
	  s_Hy[es][n]  = -cubSigmaX*cubEzx;
	  s_Ez[es][n]  = -cubSigmaX*cubHyx + cubSigmaY*cubHxy;
	  
	  s_Hxy[es][n] = -cubBetaY*cubHxy;
	  s_Hyx[es][n] = -cubBetaX*cubHyx;
	  s_Ezx[es][n] = -cubBetaX*cubEzx;
	  s_Ezy[es][n] = -cubBetaY*cubEzy;
#endif
	}
      }
    }
    
    for(int es=0;es<p_NblockC;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNp;++n;@inner(0)){
	if(n<p_Np && r_e<Npmlelements){

	  const dlong base    =    element*p_Np*p_Nfields   +n;
	  const dlong pmlbase = pmlElement*p_Np*p_Npmlfields+n;

	  dfloat rhsHx = 0, rhsHxy = 0;
	  dfloat rhsHy = 0, rhsHyx = 0;
	  dfloat rhsEz = 0, rhsEzx = 0, rhsEzy = 0;

	  for(int m=0;m<p_cubNp;++m){
	    const dfloat cPnm = cubProject[n+m*p_Np];
	    rhsHx  += cPnm*s_Hx[es][m];
	    rhsHy  += cPnm*s_Hy[es][m];
	    rhsEz  += cPnm*s_Ez[es][m];
	    rhsHxy += cPnm*s_Hxy[es][m];
	    rhsHyx += cPnm*s_Hyx[es][m];
	    rhsEzx += cPnm*s_Ezx[es][m];
	    rhsEzy += cPnm*s_Ezy[es][m];
	  }
	  
	  rhsq[base+0*p_Np] += rhsHx;
	  rhsq[base+1*p_Np] += rhsHy;
	  rhsq[base+2*p_Np] += rhsEz;

#if USE_ORIGINAL_SCALING==1
	  rhspmlq[pmlbase+0*p_Np] = rhsHxy;
	  rhspmlq[pmlbase+1*p_Np] = rhsHyx;
	  rhspmlq[pmlbase+2*p_Np] = rhsEzx;
	  rhspmlq[pmlbase+3*p_Np] = rhsEzy;
#else
	  rhspmlq[pmlbase+0*p_Np] += rhsHxy;
	  rhspmlq[pmlbase+1*p_Np] += rhsHyx;
	  rhspmlq[pmlbase+2*p_Np] += rhsEzx;
	  rhspmlq[pmlbase+3*p_Np] += rhsEzy;
#endif
        }
      }
    }
  }
}


@kernel void maxwellCfsPmlTermsTri2D(const dlong Npmlelements,
					     @restrict const  dlong *  pmlElementIds,
					     @restrict const  dlong *  pmlIds,
					     @restrict const  dfloat * pmlSigma,
					     @restrict const  dfloat * pmlBeta,
					     @restrict const  dfloat * q,
					     @restrict const  dfloat * pmlq,
					     @restrict        dfloat * rhsq,
					     @restrict        dfloat * rhspmlq){
  
  // for all elements
  for(dlong e=0;e<Npmlelements;++e;@outer(0)){
    
#define USE_ORIGINAL_SCALING 1
    
    for(int n=0;n<p_Np;++n;@inner(0)){

      dlong element = pmlElementIds[e];
      dlong pmlElement = pmlIds[e];
      
      const dlong base    =    element*p_Np*p_Nfields    + n;
      const dlong pmlbase = pmlElement*p_Np*p_Npmlfields + n;
      
      dfloat Hx = q[base+0*p_Np];
      dfloat Hy = q[base+1*p_Np];
      dfloat Ez = q[base+2*p_Np];
      
      dfloat Hxy = pmlq[pmlbase+0*p_Np];
      dfloat Hyx = pmlq[pmlbase+1*p_Np];
      dfloat Ezx = pmlq[pmlbase+2*p_Np];
      dfloat Ezy = pmlq[pmlbase+3*p_Np];
      
#if USE_ORIGINAL_SCALING==1
      dfloat rhsHxy = rhspmlq[pmlbase+0*p_Np];
      dfloat rhsHyx = rhspmlq[pmlbase+1*p_Np];
      dfloat rhsEzx = rhspmlq[pmlbase+2*p_Np];
      dfloat rhsEzy = rhspmlq[pmlbase+3*p_Np];
#endif
      dlong sbase = p_dim*pmlElement*p_Np + n;
      dfloat sigmaX = pmlSigma[sbase + 0*p_Np];
      dfloat sigmaY = pmlSigma[sbase + 1*p_Np];
      dfloat betaX  =  pmlBeta[sbase + 0*p_Np];
      dfloat betaY  =  pmlBeta[sbase + 1*p_Np];
      
#if USE_ORIGINAL_SCALING==1
      rhsq[base+0*p_Np] += +Ezy;
      rhsq[base+1*p_Np] += -Ezx;
      rhsq[base+2*p_Np] += -Hyx + Hxy;
      
      rhspmlq[pmlbase+0*p_Np] = sigmaY*rhsHxy - betaY*Hxy;
      rhspmlq[pmlbase+1*p_Np] = sigmaX*rhsHyx - betaX*Hyx;
      rhspmlq[pmlbase+2*p_Np] = sigmaX*rhsEzx - betaX*Ezx;
      rhspmlq[pmlbase+3*p_Np] = sigmaY*rhsEzy - betaY*Ezy;
#else
      
      rhsq[base+0*p_Np] += +sigmaY*Ezy;
      rhsq[base+1*p_Np] += -sigmaX*Ezx;
      rhsq[base+2*p_Np] += -sigmaX*Hyx + sigmaY*Hxy;
      
      rhspmlq[pmlbase+0*p_Np] -= betaY*Hxy;
      rhspmlq[pmlbase+1*p_Np] -= betaX*Hyx;
      rhspmlq[pmlbase+2*p_Np] -= betaX*Ezx;
      rhspmlq[pmlbase+3*p_Np] -= betaY*Ezy;
#endif
    }
  }
}
