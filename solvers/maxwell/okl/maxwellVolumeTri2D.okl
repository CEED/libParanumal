/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// isotropic maxwell
@kernel void maxwellVolumeTri2D(const dlong Nelements,
				@restrict const  dlong *  elementIds,
				@restrict const  dfloat *  vgeo,
				@restrict const  dfloat *  D,
				@restrict const  dfloat *  q,
				@restrict dfloat *  rhsq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_F[p_Nfields][p_Np];
    @shared dfloat s_G[p_Nfields][p_Np];

    @exclusive dlong element;
    
    for(int n=0;n<p_Np;++n;@inner(0)){

      element = elementIds[e];
      
      // prefetch geometric factors (constant on triangle)
      const dfloat drdx = vgeo[element*p_Nvgeo + p_RXID];
      const dfloat drdy = vgeo[element*p_Nvgeo + p_RYID];
      const dfloat dsdx = vgeo[element*p_Nvgeo + p_SXID];
      const dfloat dsdy = vgeo[element*p_Nvgeo + p_SYID];

      const dlong  qbase = element*p_Np*p_Nfields + n;
      const dfloat Hx = q[qbase+0*p_Np];
      const dfloat Hy = q[qbase+1*p_Np];
      const dfloat Ez = q[qbase+2*p_Np];

      // dH/dt = -curl E
      // dE/dt =  curl H
      
      {
	// dHx/dt = -dEz/dy
        const dfloat f = 0;
        const dfloat g = -Ez;
        s_F[0][n] = drdx*f + drdy*g;
        s_G[0][n] = dsdx*f + dsdy*g;
      }

      {
	// dHy/dt =  dEz/dx
        const dfloat f = Ez;
        const dfloat g = 0;
        s_F[1][n] = drdx*f + drdy*g;
        s_G[1][n] = dsdx*f + dsdy*g;
      }

      {
	// dEz/dt = dHy/dx - dHx/dy
        const dfloat f =  Hy;
        const dfloat g = -Hx;
        s_F[2][n] = drdx*f + drdy*g;
        s_G[2][n] = dsdx*f + dsdy*g;
      }
    }

    for(int n=0;n<p_Np;++n;@inner(0)){

      dfloat rhsq0 = 0, rhsq1 = 0, rhsq2 = 0;

      for(int i=0;i<p_Np;++i){
        const dfloat Drni = D[n+i*p_Np+0*p_Np*p_Np];
        const dfloat Dsni = D[n+i*p_Np+1*p_Np*p_Np];

        rhsq0 += Drni*s_F[0][i]
                +Dsni*s_G[0][i];
        rhsq1 += Drni*s_F[1][i]
                +Dsni*s_G[1][i];
        rhsq2 += Drni*s_F[2][i]
                +Dsni*s_G[2][i];
      }

      const dlong base = element*p_Np*p_Nfields + n;

      // move to rhs
      rhsq[base+0*p_Np] = rhsq0;
      rhsq[base+1*p_Np] = rhsq1;
      rhsq[base+2*p_Np] = rhsq2;
    }
  }
}

// PML - eps, mu => constant in PML
@kernel void maxwellPmlVolumeTri2D(const dlong Nelements,
				   @restrict const  dlong *  pmlElementIds,
				   @restrict const  dlong *  pmlIds,
				   @restrict const  dfloat *  vgeo,
				   @restrict const  dfloat *  D,
				   @restrict const  dfloat *  q,
				   @restrict const  dfloat *  pmlq,
				   @restrict dfloat *  rhsq,
				   @restrict dfloat *  rhspmlq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_Hx[p_Np];
    @shared dfloat s_Hy[p_Np];
    @shared dfloat s_Ez[p_Np];

    @exclusive dlong element, pmlElement;
    
    for(int n=0;n<p_Np;++n;@inner(0)){
      // element from all elements
      element = pmlElementIds[e];
      // element in pml element
      pmlElement = pmlIds[e];
      const dlong  qbase = element*p_Np*p_Nfields + n;
      const dfloat Hx = q[qbase+0*p_Np];
      const dfloat Hy = q[qbase+1*p_Np];
      const dfloat Ez = q[qbase+2*p_Np];

      s_Hx[n] = Hx;
      s_Hy[n] = Hy;
      s_Ez[n] = Ez;
    }


    for(int n=0;n<p_Np;++n;@inner(0)){

      // prefetch geometric factors (constant on triangle)
      const dlong gbase = element*p_Nvgeo;
      const dfloat drdx = vgeo[gbase + p_RXID];
      const dfloat drdy = vgeo[gbase + p_RYID];
      const dfloat dsdx = vgeo[gbase + p_SXID];
      const dfloat dsdy = vgeo[gbase + p_SYID];

      // dH/dt = -curl E
      // dE/dt =  curl H
      
      dfloat dHxdr = 0, dHxds = 0;
      dfloat dHydr = 0, dHyds = 0;
      dfloat dEzdr = 0, dEzds = 0;

      for(int i=0;i<p_Np;++i){
        const dfloat Drni = D[n+i*p_Np+0*p_Np*p_Np];
        const dfloat Dsni = D[n+i*p_Np+1*p_Np*p_Np];

	const dfloat Hxi = s_Hx[i];
	const dfloat Hyi = s_Hy[i];
	const dfloat Ezi = s_Ez[i];
	
	dHxdr += Drni*Hxi; dHxds += Dsni*Hxi;
	dHydr += Drni*Hyi; dHyds += Dsni*Hyi;
	dEzdr += Drni*Ezi; dEzds += Dsni*Ezi;
      }
      
      const dfloat dHxdy = drdy*dHxdr + dsdy*dHxds;
      const dfloat dHydx = drdx*dHydr + dsdx*dHyds;
      const dfloat dEzdx = drdx*dEzdr + dsdx*dEzds;
      const dfloat dEzdy = drdy*dEzdr + dsdy*dEzds;
      
      const dlong base    = element*p_Np*p_Nfields + n;
      const dlong pmlbase = pmlElement*p_Npmlfields*p_Np + n;
      
      // store rhs for state
      rhsq[base+0*p_Np] = -dEzdy;
      rhsq[base+1*p_Np] =  dEzdx;
      rhsq[base+2*p_Np] =  dHydx - dHxdy;

      // store rhs for pmlstate
      rhspmlq[pmlbase+0*p_Np] = dHxdy;

    }
  }
}
