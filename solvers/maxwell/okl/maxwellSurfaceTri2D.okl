/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// TM mode:
// dHx/dt = -dEz/dy           
// dHy/dt =  dEz/dx
// dEz/dt =  dHy/dx - dHx/dt


// Riemann solver
void upwind(const dfloat nx,
            const dfloat ny,
            const dfloat HxM,
            const dfloat HyM,
	    const dfloat EzM,
	    const dfloat HxP,
            const dfloat HyP,
            const dfloat EzP,
            dfloat *HxU,
            dfloat *HyU,
            dfloat *EzU){


  // boundary traces (HxP, HyP, EzP) already modified for BCs
  // evaluate upwind fluxes                                                                                                   
  *HxU = p_half*( HxP + HxM - ny*(EzP-EzM));
  *HyU = p_half*( HyP + HyM + nx*(EzP-EzM));
  *EzU = p_half*( EzP + EzM + nx*(HyP-HyM) - ny*(HxP-HxM));
  
}

// batch process elements
@kernel void maxwellSurfaceTri2D(const dlong Nelements,
                                  @restrict const  dlong  *  elementIds,
                                  @restrict const  dfloat *  sgeo,
                                  @restrict const  dfloat *  LIFT,
                                  @restrict const  dlong  *  vmapM,
                                  @restrict const  dlong  *  vmapP,
                                  @restrict const  int    *  EToB,
                                  const dfloat time,
                                  @restrict const  dfloat *  x,
                                  @restrict const  dfloat *  y,
                                  @restrict const  dfloat *  z,
                                  @restrict const  dfloat *  q,
                                  @restrict dfloat *  rhsq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxHx[p_NblockS][p_NfacesNfp];
    @shared dfloat s_fluxHy[p_NblockS][p_NfacesNfp];
    @shared dfloat s_fluxEz[p_NblockS][p_NfacesNfp];

    @exclusive dlong r_e, element;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        r_e = eo + es;
        if(r_e<Nelements){
          element = elementIds[r_e];

          if(n<p_NfacesNfp){
            // find face that owns this node
            const int face = n/p_Nfp;

            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(element*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const dlong id  = element*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load traces
            const dlong eM = element;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;

            const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
            const dlong qbaseP = eP*p_Np*p_Nfields + vidP;

            const dfloat HxM = q[qbaseM + 0*p_Np];
            const dfloat HyM = q[qbaseM + 1*p_Np];
            const dfloat EzM = q[qbaseM + 2*p_Np];

            dfloat HxP = q[qbaseP + 0*p_Np];
            dfloat HyP = q[qbaseP + 1*p_Np];
            dfloat EzP = q[qbaseP + 2*p_Np];

            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*element];
            if(bc>0){
              maxwellDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, HxM, HyM, EzM, &HxP, &HyP, &EzP);
              //should also add the Neumann BC here, but need uxM, uyM, vxM, abd vyM somehow
            }
	    
            // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
            const dfloat sc = invJ*sJ;

	    dfloat HxU, HyU, EzU;
	    upwind(nx, ny, HxM, HyM, EzM, HxP, HyP, EzP, &HxU, &HyU, &EzU);

	    const dfloat fluxHx = -ny*(EzU-EzM); // p_half*( ny*dEz + alpha*(ndotdH*nx-dHx));
	    const dfloat fluxHy =  nx*(EzU-EzM); // p_half*(-nx*dEz + alpha*(ndotdH*ny-dHy));
	    const dfloat fluxEz =  nx*(HyU-HyM) - ny*(HxU-HxM); //  p_half*(-nx*dHy + ny*dHx - alpha*dEz);
	    
            s_fluxHx[es][n] = sc*(fluxHx);
            s_fluxHy[es][n] = sc*(fluxHy);
            s_fluxEz[es][n] = sc*(fluxEz);
          }
        }
      }
    }

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(r_e<Nelements){
          if(n<p_Np){
            // load rhs data from volume fluxes
            dfloat LfluxHx = 0.f, LfluxHy = 0.f, LfluxEz = 0.f;

#pragma unroll p_NfacesNfp
	    for(int m=0;m<p_NfacesNfp;++m){
	      const dfloat L = LIFT[n+m*p_Np];
	      LfluxHx += L*s_fluxHx[es][m];
	      LfluxHy += L*s_fluxHy[es][m];
	      LfluxEz += L*s_fluxEz[es][m];
	    }

            const dlong base = element*p_Np*p_Nfields+n;
            rhsq[base+0*p_Np] += LfluxHx;
            rhsq[base+1*p_Np] += LfluxHy;
            rhsq[base+2*p_Np] += LfluxEz;
          }
        }
      }
    }
  }
}


// batch process elements
@kernel void maxwellPmlSurfaceTri2D(const dlong pmlNelements,
				    @restrict const  dlong  *  pmlElementIds,
				    @restrict const  dlong  *  pmlIds,
				    @restrict const  dfloat *  sgeo,
				    @restrict const  dfloat *  LIFT,
				    @restrict const  dlong  *  vmapM,
				    @restrict const  dlong  *  vmapP,
				    @restrict const  int    *  EToB,
				    const dfloat time,
				    @restrict const  dfloat *  x,
				    @restrict const  dfloat *  y,
				    @restrict const  dfloat *  z,
				    @restrict const  dfloat *  q,
				    @restrict dfloat *  rhsq,
				    @restrict dfloat *  rhspmlq){
  
  // for all elements
  for(dlong eo=0;eo<pmlNelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxHx[p_NblockS][p_NfacesNfp];
    @shared dfloat s_fluxHy[p_NblockS][p_NfacesNfp];
    @shared dfloat s_fluxEz[p_NblockS][p_NfacesNfp];
    @shared dfloat s_fluxWz[p_NblockS][p_NfacesNfp];

    @exclusive dlong r_e, element;

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        r_e = eo + es;
        if(r_e<pmlNelements){
          element = pmlElementIds[r_e];
	  
          if(n<p_NfacesNfp){
            // find face that owns this node
            const int face = n/p_Nfp;

            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(element*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const dlong id  = element*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load traces
            const dlong eM = element;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;

            const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
            const dlong qbaseP = eP*p_Np*p_Nfields + vidP;

            const dfloat HxM = q[qbaseM + 0*p_Np];
            const dfloat HyM = q[qbaseM + 1*p_Np];
            const dfloat EzM = q[qbaseM + 2*p_Np];

            dfloat HxP = q[qbaseP + 0*p_Np];
            dfloat HyP = q[qbaseP + 1*p_Np];
            dfloat EzP = q[qbaseP + 2*p_Np];

            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*element];
            if(bc>0){
              maxwellDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, HxM, HyM, EzM, &HxP, &HyP, &EzP);
              //should also add the Neumann BC here, but need uxM, uyM, vxM, abd vyM somehow
            }
	    
            // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
            const dfloat sc = invJ*sJ;

	    dfloat HxU, HyU, EzU;
	    upwind(nx, ny, HxM, HyM, EzM, HxP, HyP, EzP, &HxU, &HyU, &EzU);

	    const dfloat fluxHx = -ny*(EzU-EzM); // p_half*( ny*dEz + alpha*(ndotdH*nx-dHx));
	    const dfloat fluxHy =  nx*(EzU-EzM); // p_half*(-nx*dEz + alpha*(ndotdH*ny-dHy));
	    const dfloat fluxEz =  nx*(HyU-HyM) - ny*(HxU-HxM); //  p_half*(-nx*dHy + ny*dHx - alpha*dEz);
	    const dfloat fluxWz = ny*(HxU-HxM);

            s_fluxHx[es][n] = sc*(fluxHx);
            s_fluxHy[es][n] = sc*(fluxHy);
            s_fluxEz[es][n] = sc*(fluxEz);

	    s_fluxWz[es][n] = sc*(fluxWz);
          }
        }
      }
    }

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(r_e<pmlNelements){
          if(n<p_Np){
            // load rhs data from volume fluxes
            dfloat LfluxHx = 0.f, LfluxHy = 0.f, LfluxEz = 0.f;
	    dfloat LfluxWz = 0.f;

#pragma unroll p_NfacesNfp
	    for(int m=0;m<p_NfacesNfp;++m){
	      const dfloat L = LIFT[n+m*p_Np];
	      LfluxHx += L*s_fluxHx[es][m];
	      LfluxHy += L*s_fluxHy[es][m];
	      LfluxEz += L*s_fluxEz[es][m];
	      LfluxWz += L*s_fluxWz[es][m];
	    }

            const dlong base = element*p_Np*p_Nfields+n;
	    const dlong basepml = pmlIds[r_e]*p_Np*p_Npmlfields + n;
            rhsq[base+0*p_Np] += LfluxHx;
            rhsq[base+1*p_Np] += LfluxHy;
            rhsq[base+2*p_Np] += LfluxEz;
	    rhspmlq[basepml+0*p_Np] += LfluxWz;
          }
        }
      }
    }
  }
}
