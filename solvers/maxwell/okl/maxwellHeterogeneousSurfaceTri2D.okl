/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// Roe averaged Riemann solver
void upwind(const dfloat nx,
            const dfloat ny,
	    const dfloat4 iweights,
            const dfloat dHx,
            const dfloat dHy,
            const dfloat dEz,
	    dfloat *fluxHx,
            dfloat *fluxHy,
            dfloat *fluxEz){

  dfloat alpha=1; // => full upwinding
  
  dfloat ndotdH = nx*dHx + ny*dHy;

  dfloat centHw = iweights.x;
  dfloat stabHw = iweights.y;
  dfloat centEw = iweights.z;
  dfloat stabEw = iweights.w;
  
  *fluxHx = centHw*(-ny*dEz         ) + alpha*stabHw*(dHx - ndotdH*nx);
  *fluxHy = centHw*( nx*dEz         ) + alpha*stabHw*(dHy - ndotdH*ny);
  *fluxEz = centEw*( nx*dHy - ny*dHx) + alpha*stabEw*(dEz);
}
 
// batch process elements
@kernel void maxwellHeterogeneousSurfaceTri2D(const dlong Nelements,
					      @restrict const  dlong  *  elementIds,
					      @restrict const  dfloat *  sgeo,
					      @restrict const  dfloat *  LIFT,
					      @restrict const  dlong  *  vmapM,
					      @restrict const  dlong  *  vmapP,
					      @restrict const  int    *  EToB,
					      const dfloat time,					      
					      @restrict const  dfloat *  x,
					      @restrict const  dfloat *  y,
					      @restrict const  dfloat *  z,
					      @restrict const  dfloat *  intInterp, // interpolate to integration nodes
					      @restrict const  dfloat *  intLIFT, // lift from integration to interpolation nodes
					      @restrict const  dfloat4 *  intUpwindWeights, // flux term coefficients
					      @restrict const  dfloat *  q,
					      @restrict dfloat *  rhsq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // reduces shared storage by processing one face at a time

    @shared dfloat s_dHx[p_NblockS][p_Nfp];
    @shared dfloat s_dHy[p_NblockS][p_Nfp];
    @shared dfloat s_dEz[p_NblockS][p_Nfp];
    
    @shared dfloat s_ifluxHx[p_NblockS][p_intNfp];
    @shared dfloat s_ifluxHy[p_NblockS][p_intNfp];
    @shared dfloat s_ifluxEz[p_NblockS][p_intNfp];

    @exclusive dlong r_e, element;

    @exclusive dfloat LfluxHx, LfluxHy, LfluxEz;

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){
	LfluxHx = 0; LfluxHy = 0; LfluxEz = 0;
	
	r_e = eo + es;
	element = (r_e<Nelements) ? elementIds[r_e]:-1;
      }
    }

    for(int face=0;face<p_Nfaces;++face){

      @barrier();
      
      // for nodes on face 
      for(int es=0;es<p_NblockS;++es;@inner(1)){
	for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){ // cubMaxNodes1 = max(intNfp,Np)
	  
	  if(r_e<Nelements && n<p_Nfp){
	    // load surface geofactors for this face
	    const dlong sid    = p_Nsgeo*(element*p_Nfaces+face);
	    const dfloat nx   = sgeo[sid+p_NXID];
	    const dfloat ny   = sgeo[sid+p_NYID];
	    
	    // indices of negative and positive traces of face node
	    const dlong id  = element*p_Nfp*p_Nfaces + n + face*p_Nfp;
	    const dlong idM = vmapM[id];
	    const dlong idP = vmapP[id];
	    
	    // load traces
	    const dlong eM = element;
	    const dlong eP = idP/p_Np;
	    const int vidM = idM%p_Np;
	    const int vidP = idP%p_Np;
	    
	    const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
	    const dlong qbaseP = eP*p_Np*p_Nfields + vidP;
	    
	    const dfloat HxM = q[qbaseM + 0*p_Np];
	    const dfloat HyM = q[qbaseM + 1*p_Np];
	    const dfloat EzM = q[qbaseM + 2*p_Np];
	    
	    dfloat HxP = q[qbaseP + 0*p_Np];
	    dfloat HyP = q[qbaseP + 1*p_Np];
	    dfloat EzP = q[qbaseP + 2*p_Np];
	    
	    // apply boundary condition
	    const int bc = EToB[face+p_Nfaces*element];
	    if(bc>0){
	      maxwellDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, HxM, HyM, EzM, &HxP, &HyP, &EzP);
	    }
	    
	    s_dHx[es][n] = HxP-HxM;
	    s_dHy[es][n] = HyP-HyM;
	    s_dEz[es][n] = EzP-EzM;
	  }
	}
      }
    
      // interpolate to quadrature nodes
      for(int es=0;es<p_NblockS;++es;@inner(1)){
	for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){ // cubMaxNodes1 = max(intNfp,Np)
	  r_e = eo + es;
	  if(r_e<Nelements && n<p_intNfp){
	    dfloat idHx = 0, idHy = 0, idEz = 0;
	    
	    for(int m=0;m<p_Nfp;++m){
	      const dfloat iInm = intInterp[ (n+face*p_intNfp) + m*p_Nfaces*p_intNfp];
	      idHx += iInm*s_dHx[es][m];
	      idHy += iInm*s_dHy[es][m];
	      idEz += iInm*s_dEz[es][m];	      
	    }
	    
	    // load surface geofactors for this face
	    const dlong sid   = p_Nsgeo*(element*p_Nfaces+face);
	    const dfloat nx   = sgeo[sid+p_NXID];
	    const dfloat ny   = sgeo[sid+p_NYID];
	    const dfloat sJ   = sgeo[sid+p_SJID];
	    const dfloat invJ = sgeo[sid+p_IJID];

	    const dlong iid  = element*p_intNfp*p_Nfaces + n + face*p_intNfp;
	    const dfloat4 iweights = intUpwindWeights[iid];

	    // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
	    const dfloat sc = invJ*sJ; // upwind weights take care of scalign
	    
            dfloat ifluxHx, ifluxHy, ifluxEz;
	    
            upwind(nx, ny, iweights, idHx, idHy, idEz, &ifluxHx, &ifluxHy, &ifluxEz);
	    
            s_ifluxHx[es][n] = sc*ifluxHx;
            s_ifluxHy[es][n] = sc*ifluxHy;
            s_ifluxEz[es][n] = sc*ifluxEz;
          }
        }
      }

      // lift this face to element nodes
      for(int es=0;es<p_NblockS;++es;@inner(1)){
	for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){ // cubMaxNodes1 = max(intNfp,Np)
	  
	  if(n<p_Np){
	    for(int m=0;m<p_intNfp;++m){
	      const dfloat L = intLIFT[n+(m+face*p_intNfp)*p_Np];
	      LfluxHx += L*s_ifluxHx[es][m];
	      LfluxHy += L*s_ifluxHy[es][m];
	      LfluxEz += L*s_ifluxEz[es][m];
	    }
	  }
	}
      }
    } // end face loop

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes1;++n;@inner(0)){  // cubMaxNodes1 = max(intNfp,Np)
        if(r_e<Nelements){
          if(n<p_Np){
            const dlong base = element*p_Np*p_Nfields+n;
            rhsq[base+0*p_Np] += LfluxHx;
            rhsq[base+1*p_Np] += LfluxHy;
            rhsq[base+2*p_Np] += LfluxEz;
          }
        }
      }
    }
  }
}
