/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

@kernel void cnsGradSurfaceConservativeTet3D(const dlong Nelements,
                                             @restrict const  dfloat *  sgeo,
                                             @restrict const  dfloat *  LIFT,
                                             @restrict const  dlong  *  vmapM,
                                             @restrict const  dlong  *  vmapP,
                                             @restrict const  int    *  EToB,
                                             @restrict const  dfloat *  x,
                                             @restrict const  dfloat *  y,
                                             @restrict const  dfloat *  z,
                                             @restrict const  dfloat *  pCoeff,
                                                       const  dfloat time,
                                             @restrict const  dfloat *  q,
                                             @restrict        dfloat *  gradq){

  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_gradflux[p_Ngrads][p_Nfp];

    @exclusive dfloat Lrrxflux, Lrryflux, Lrrzflux; 
    @exclusive dfloat Lruxflux, Lruyflux, Lruzflux; 
    @exclusive dfloat Lrvxflux, Lrvyflux, Lrvzflux; 
    @exclusive dfloat Lrwxflux, Lrwyflux, Lrwzflux; 
    @exclusive dfloat Lrexflux, Lreyflux, Lrezflux; 

    for(int n=0;n<p_Np;++n;@inner(0)){
      Lrrxflux  = 0.0; Lrryflux  = 0.0; Lrrzflux  = 0.0;
      Lruxflux  = 0.0; Lruyflux  = 0.0; Lruzflux  = 0.0;
      Lrvxflux  = 0.0; Lrvyflux  = 0.0; Lrvzflux  = 0.0;
      Lrwxflux  = 0.0; Lrwyflux  = 0.0; Lrwzflux  = 0.0;
      Lrexflux  = 0.0; Lreyflux  = 0.0; Lrezflux  = 0.0;
    }


    #pragma unroll p_Nfaces
      for(int face=0;face<p_Nfaces;++face){

         for(int n=0;n<p_Np;++n;@inner(0)){ 
            if(n<p_Nfp){
              // indices of negative and positive traces of face node
              const dfloat gamma  = pCoeff[p_GMID]; // gamma
              const dfloat R      = pCoeff[p_RRID]; 
              const dfloat CP     = pCoeff[p_CPID]; 
              const dfloat CV     = pCoeff[p_CVID]; 
              const dfloat mu     = pCoeff[p_MUID]; 

              // load surface geofactors for this face
              const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
              const dfloat nx   = sgeo[sid+p_NXID];
              const dfloat ny   = sgeo[sid+p_NYID];
              const dfloat nz   = sgeo[sid+p_NZID];
              const dfloat sJ   = sgeo[sid+p_SJID];
              const dfloat invJ = sgeo[sid+p_IJID];

              // indices of negative and positive traces of face node
              const dlong id  = e*p_Nfp*p_Nfaces + (n + face*p_Nfp);
              const dlong idM = vmapM[id];
              const dlong idP = vmapP[id];

              // load traces
              const dlong eM = e;
              const dlong eP = idP/p_Np;
              const int vidM = idM%p_Np;
              const int vidP = idP%p_Np;

              const dlong baseM = eM*p_Np*p_Nfields + vidM;
              const dlong baseP = eP*p_Np*p_Nfields + vidP;

              const dfloat rrM = q[baseM + 0*p_Np];
              const dfloat ruM = q[baseM + 1*p_Np];
              const dfloat rvM = q[baseM + 2*p_Np];
              const dfloat rwM = q[baseM + 3*p_Np];
              const dfloat reM = q[baseM + 4*p_Np];

                    dfloat rrP = q[baseP + 0*p_Np];
                    dfloat ruP = q[baseP + 1*p_Np];
                    dfloat rvP = q[baseP + 2*p_Np];
                    dfloat rwP = q[baseP + 3*p_Np];
                    dfloat reP = q[baseP + 4*p_Np];
             
            // apply boundary condition given in primitive variables
            const int bc = EToB[face+p_Nfaces*e];
            if(bc>0) {
              const dfloat uM = ruM/rrM, vM = rvM/rrM, wM = rwM/rrM;
              const dfloat pM = (gamma-1.0)*(reM - 0.5*rrM*(uM*uM + vM*vM + wM*wM)); 

              dfloat uP = ruP/rrP, vP = rvP/rrP, wP = rwP/rrP;
              dfloat pP = (gamma-1.0)*(reP - 0.5*rrP*(uP*uP+vP*vP+wP*wP)); 

              dfloat dudx = 0.f, dudy = 0.f, dudz = 0.f; //fake these values
              dfloat dvdx = 0.f, dvdy = 0.f, dvdz = 0.f; 
              dfloat dwdx = 0.f, dwdy = 0.f, dwdz = 0.f; 
              cnsDiffusionBoundaryConditions3D(bc, gamma, R, CP, CV, mu, \
                                time, x[idM], y[idM], z[idM], nx, ny, nz,\
                                rrM, uM, vM, wM, pM, 0., 0., 0., 0., 0., 0., 0., 0., 0., \
                                &rrP, &uP, &vP, &wP, &pP, \
                                &dudx, &dudy, &dudz, &dvdx, &dvdy, &dvdz, &dwdx, &dwdy, &dwdz);

              // Return back to conservative formulation
              ruP = rrP*uP; 
              rvP = rrP*vP; 
              rwP = rrP*wP; 
              reP = pP/(gamma-1.) + 0.5*rrP*(uP*uP+vP*vP+wP*wP); 
            }

            const dfloat sc = 0.5f*invJ*sJ;
            s_gradflux[0][n]  = sc*nx*(rrP-rrM);
            s_gradflux[1][n]  = sc*ny*(rrP-rrM);
            s_gradflux[2][n]  = sc*nz*(rrP-rrM);

            s_gradflux[3][n]  = sc*nx*(ruP-ruM);
            s_gradflux[4][n]  = sc*ny*(ruP-ruM);
            s_gradflux[5][n]  = sc*nz*(ruP-ruM);

            s_gradflux[6][n]  = sc*nx*(rvP-rvM);
            s_gradflux[7][n]  = sc*ny*(rvP-rvM);
            s_gradflux[8][n]  = sc*nz*(rvP-rvM);

            s_gradflux[ 9][n] = sc*nx*(rwP-rwM);
            s_gradflux[10][n] = sc*ny*(rwP-rwM);
            s_gradflux[11][n] = sc*nz*(rwP-rwM);

            s_gradflux[12][n] = sc*nx*(reP-reM);
            s_gradflux[13][n] = sc*ny*(reP-reM);
            s_gradflux[14][n] = sc*nz*(reP-reM);
        }
      } 

      for(int n=0;n<p_Np;++n;@inner(0)){
        #pragma unroll p_Nfp
          for(int m=0;m<p_Nfp;++m){
            const dfloat L = LIFT[n+(m+face*p_Nfp)*p_Np];
            
            Lrrxflux += L*s_gradflux[0][m];
            Lrryflux += L*s_gradflux[1][m];
            Lrrzflux += L*s_gradflux[2][m];

            Lruxflux += L*s_gradflux[3][m];
            Lruyflux += L*s_gradflux[4][m];
            Lruzflux += L*s_gradflux[5][m];

            Lrvxflux += L*s_gradflux[6][m];
            Lrvyflux += L*s_gradflux[7][m];
            Lrvzflux += L*s_gradflux[8][m];

            Lrwxflux += L*s_gradflux[ 9][m];
            Lrwyflux += L*s_gradflux[10][m];
            Lrwzflux += L*s_gradflux[11][m];

            Lrexflux += L*s_gradflux[12][m];
            Lreyflux += L*s_gradflux[13][m];
            Lrezflux += L*s_gradflux[14][m];   
          }
        }
    }

// for each node in the element
    for(int n=0;n<p_Np;++n;@inner(0)){
        const dlong base = e*p_Np*p_Ngrads+n;
        gradq[base+ 0*p_Np] += Lrrxflux;
        gradq[base+ 1*p_Np] += Lrryflux;
        gradq[base+ 2*p_Np] += Lrrzflux;

        gradq[base+ 3*p_Np] += Lruxflux;
        gradq[base+ 4*p_Np] += Lruyflux;
        gradq[base+ 5*p_Np] += Lruzflux;

        gradq[base+ 6*p_Np] += Lrvxflux;
        gradq[base+ 7*p_Np] += Lrvyflux;
        gradq[base+ 8*p_Np] += Lrvzflux;

        gradq[base+ 9*p_Np] += Lrwxflux;
        gradq[base+10*p_Np] += Lrwyflux;
        gradq[base+11*p_Np] += Lrwzflux;

        gradq[base+12*p_Np] += Lrexflux;
        gradq[base+13*p_Np] += Lreyflux;
        gradq[base+14*p_Np] += Lrezflux;
      }
  }
}