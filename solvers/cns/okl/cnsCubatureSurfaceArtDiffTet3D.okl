/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
#define RMIN 0.01
#define PMIN 0.01
#define ALPHA 100

#define POSITIVITY 1

// Regularization of rho / p  (cannot be smaller than rmin / pmin)
dfloat LMAX(const dfloat x, const dfloat alpha){
  dfloat xlim = x*(atan(alpha*x)/M_PI + 0.5) - atan(alpha)/M_PI + 0.5;
  return xlim;
}

// Density / pressure sensor for gradients...
dfloat SMOOTH(const dfloat x, const dfloat alpha){
  dfloat dx = atan(alpha*x)/M_PI + alpha*x/(M_PI*(alpha*alpha*x*x + 1.0)) + 0.5;
  return dx; 
}


// Roe averaged Riemann solver
void upwindRoeAveraged(const dfloat nx,
                       const dfloat ny,
                       const dfloat nz,
                       const dfloat gamma,
                       const dfloat rM,
                       const dfloat uM,
                       const dfloat vM,
                       const dfloat wM,
                       const dfloat pM,
                       const dfloat rP,
                       const dfloat uP,
                       const dfloat vP,
                       const dfloat wP,
                       const dfloat pP,
                       dfloat *rflux,
                       dfloat *ruflux,
                       dfloat *rvflux,
                       dfloat *rwflux,
                       dfloat *Eflux){

  const dfloat EM = pM/(gamma-1) + 0.5*rM*(uM*uM+vM*vM+wM*wM);
  const dfloat EP = pP/(gamma-1) + 0.5*rP*(uP*uP+vP*vP+wP*wP);
  const dfloat HM = (EM+pM)/rM;
  const dfloat HP = (EP+pP)/rP;

  // Compute Roe average variables
  const dfloat sqrtrM = sqrt(rM);
  const dfloat sqrtrP = sqrt(rP);

  const dfloat r = sqrtrM*sqrtrP;
  const dfloat u = (sqrtrM*uM + sqrtrP*uP)/(sqrtrM + sqrtrP);
  const dfloat v = (sqrtrM*vM + sqrtrP*vP)/(sqrtrM + sqrtrP);
  const dfloat w = (sqrtrM*wM + sqrtrP*wP)/(sqrtrM + sqrtrP);
  const dfloat H = (sqrtrM*HM + sqrtrP*HP)/(sqrtrM + sqrtrP);

  const dfloat c2 = (gamma-1)*(H-0.5*(u*u+v*v+w*w));
  const dfloat c = sqrt(c2);

  // normal velocity
  const dfloat qP = nx*uP+ny*vP+nz*wP;
  const dfloat qM = nx*uM+ny*vM+nz*wM;
  const dfloat q  = nx*u +ny*v +nz*w;

  // jump terms
  const dfloat dp = pP-pM;
  const dfloat dr = rP-rM;
  const dfloat du = uP-uM;
  const dfloat dv = vP-vM;
  const dfloat dw = wP-wM;
  const dfloat dq = qP-qM;

  const dfloat W1 = fabs(q-c) * 0.5*(dp-r*c*dq)/(c2);
  const dfloat W2 = fabs(q  ) * r;
  const dfloat W3 = fabs(q+c) * 0.5*(dp+r*c*dq)/(c2);
  const dfloat W4 = fabs(q  ) * (dr-(dp/c2));

  // Fluxes from traces n.F(uP) and n.F(uM)
  *rflux  = 0.5*((rP*qP         ) + (rM*qM         ));
  *ruflux = 0.5*((rP*uP*qP+nx*pP) + (rM*uM*qM+nx*pM));
  *rvflux = 0.5*((rP*vP*qP+ny*pP) + (rM*vM*qM+ny*pM));
  *rwflux = 0.5*((rP*wP*qP+nz*pP) + (rM*wM*qM+nz*pM));
  *Eflux  = 0.5*((qP*(EP+pP)    ) + (qM*(EM+pM)    ));

  // Roe flux
  *rflux  -= 0.5*(W1*1.0      + W2*0.0                   + W3*1.0      + W4*1.0              );
  *ruflux -= 0.5*(W1*(u-nx*c) + W2*(du-nx*dq)            + W3*(u+nx*c) + W4*u                );
  *rvflux -= 0.5*(W1*(v-ny*c) + W2*(dv-ny*dq)            + W3*(v+ny*c) + W4*v                );
  *rwflux -= 0.5*(W1*(w-nz*c) + W2*(dw-nz*dq)            + W3*(w+nz*c) + W4*w                );
  *Eflux  -= 0.5*(W1*(H- q*c) + W2*(u*du+v*dv+w*dw-q*dq) + W3*(H+ q*c) + W4*0.5*(u*u+v*v+w*w));
}



// Roe averaged Riemann solver
void upwindLaxFriedrichs(const dfloat nx,
                         const dfloat ny,
                         const dfloat nz,
                         const dfloat gamma,
                         const dfloat rM,
                         const dfloat uM,
                         const dfloat vM,
                         const dfloat wM,
                         const dfloat pM,
                         const dfloat rP,
                         const dfloat uP,
                         const dfloat vP,
                         const dfloat wP,
                         const dfloat pP,
                         dfloat *rflux,
                         dfloat *ruflux,
                         dfloat *rvflux,
                         dfloat *rwflux,
                         dfloat *Eflux){

  // // Find the nodal maximum wave speed 
  // const dfloat lambdaM = sqrt(uM*uM+vM*vM+wM*wM) + sqrt(fabs(gamma*pM/rM));  
  // const dfloat lambdaP = sqrt(uP*uP+vP*vP+wP*wP) + sqrt(fabs(gamma*pP/rP));  

  // const dfloat lambda = (lambdaM>lambdaP) ? lambdaM:lambdaP; 

   // Sum the left and right velocities and take the normal
  const dfloat vn = nx*(uM+uP)+ny*(vM+vP)+nz*(wM+wP); 
  // Estimate the maximum wave speed / 2
  const dfloat an = sqrt(0.25*gamma*(pM+pP)/(rM+rP)) + 0.25*fabs(vn); 

  const dfloat EM = pM/(gamma-1) + 0.5*rM*(uM*uM+vM*vM+wM*wM);
  const dfloat EP = pP/(gamma-1) + 0.5*rP*(uP*uP+vP*vP+wP*wP);

  const dfloat F1M = rM*uM,             F1P = rP*uP;
  const dfloat F2M = rM*uM*uM + pM,     F2P = rP*uP*uP + pP; 
  const dfloat F3M = rM*uM*vM,          F3P = rP*uP*vP; 
  const dfloat F4M = rM*uM*wM,          F4P = rP*uP*wP; 
  const dfloat F5M = uM*(EM + pM),      F5P = uP*(EP + pP); 

  const dfloat G1M = rM*vM,             G1P = rP*vP;
  const dfloat G2M = rM*vM*uM,          G2P = rP*vP*uP; 
  const dfloat G3M = rM*vM*vM + pM,     G3P = rP*vP*vP + pP; 
  const dfloat G4M = rM*vM*wM,          G4P = rP*vP*wP; 
  const dfloat G5M = vM*(EM + pM),      G5P = vP*(EP + pP); 

  const dfloat H1M = rM*wM,             H1P = rP*wP;
  const dfloat H2M = rM*wM*uM,          H2P = rP*wP*uP; 
  const dfloat H3M = rM*wM*vM,          H3P = rP*wP*vP; 
  const dfloat H4M = rM*wM*wM + pM,     H4P = rP*wP*wP + pP; 
  const dfloat H5M = wM*(EM + pM),      H5P = wP*(EP + pP); 

  // Fluxes from traces n.F(uP) and n.F(uM)
  *rflux  = 0.5*(nx*( F1M+F1P)+ny*(G1M+G1P)+nz*(H1M+H1P) + an*(rM-rP)      );
  *ruflux = 0.5*(nx*( F2M+F2P)+ny*(G2M+G2P)+nz*(H2M+H2P) + an*(rM*uM-rP*uP));
  *rvflux = 0.5*(nx*( F3M+F3P)+ny*(G3M+G3P)+nz*(H3M+H3P) + an*(rM*vM-rP*vP));
  *rwflux = 0.5*(nx*( F4M+F4P)+ny*(G4M+G4P)+nz*(H4M+H4P) + an*(rM*wM-rP*wP));
  *Eflux  = 0.5*(nx*( F5M+F5P)+ny*(G5M+G5P)+nz*(H5M+H5P) + an*(EM-EP));
}

// batch process elements
@kernel void cnsCubatureSurfaceArtificialDiffusionLaplaceTet3D(const dlong Nelements,
                                                             const int BCStateID, 
                                                              @restrict const  dfloat *  vgeo,
                                                              @restrict const  dfloat *  sgeo,
                                                              @restrict const  dlong  *  vmapM,
                                                              @restrict const  dlong  *  vmapP,
                                                              @restrict const  int    *  EToB,
                                                              @restrict const  dfloat *  intInterp, 
                                                              @restrict const  dfloat *  intLIFT, 
                                                              @restrict const  dfloat *  intx,
                                                              @restrict const  dfloat *  inty,
                                                              @restrict const  dfloat *  intz,
                                                              @restrict const dfloat *pCoeff,
                                                              @restrict const  dfloat *  flowStates,
                                                              const dfloat time,
                                                              @restrict const  dfloat *  aMu,
                                                              @restrict const  dfloat *  q,
                                                              @restrict const  dfloat *  gradq,
                                                              @restrict dfloat *  rhsq){

  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_qM[p_Nfields][p_NfacesNfp];
    @shared dfloat s_qP[p_Nfields][p_NfacesNfp];
    @shared dfloat s_gradqM[p_Ngrads][p_NfacesNfp];
    @shared dfloat s_gradqP[p_Ngrads][p_NfacesNfp];

    // viscosity is C0 but just in case!!!!
    @shared dfloat s_mu[p_NfacesNfp];

    @shared dfloat s_rflux [p_intNfpNfaces];
    @shared dfloat s_ruflux[p_intNfpNfaces];
    @shared dfloat s_rvflux[p_intNfpNfaces];
    @shared dfloat s_rwflux[p_intNfpNfaces];
    @shared dfloat s_Eflux [p_intNfpNfaces];


    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const dlong id  = e*p_Nfp*p_Nfaces + n;
        const dlong idM = vmapM[id];
        const dlong idP = vmapP[id];

        const dlong eM = e;
        const dlong eP = idP/p_Np;
        const int vidM = idM%p_Np;
        const int vidP = idP%p_Np;
        
        const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
        const dlong qbaseP = eP*p_Np*p_Nfields + vidP;
        const dlong sbaseM = eM*p_Np*p_Ngrads  + vidM;
        const dlong sbaseP = eP*p_Np*p_Ngrads  + vidP;
        //
        s_mu[n] = aMu[eM*p_Np  + vidM];

        //
        s_qM[0][n] = q[qbaseM + 0*p_Np];
        s_qM[1][n] = q[qbaseM + 1*p_Np];
        s_qM[2][n] = q[qbaseM + 2*p_Np];
        s_qM[3][n] = q[qbaseM + 3*p_Np];
        s_qM[4][n] = q[qbaseM + 4*p_Np];
        
        //
        s_qP[0][n] = q[qbaseP + 0*p_Np];
        s_qP[1][n] = q[qbaseP + 1*p_Np];
        s_qP[2][n] = q[qbaseP + 2*p_Np];
        s_qP[3][n] = q[qbaseP + 3*p_Np];
        s_qP[4][n] = q[qbaseP + 4*p_Np];
        
        //
        s_gradqM[ 0][n] = gradq[sbaseM+ 0*p_Np];
        s_gradqM[ 1][n] = gradq[sbaseM+ 1*p_Np];
        s_gradqM[ 2][n] = gradq[sbaseM+ 2*p_Np];
        s_gradqM[ 3][n] = gradq[sbaseM+ 3*p_Np];
        s_gradqM[ 4][n] = gradq[sbaseM+ 4*p_Np];
        s_gradqM[ 5][n] = gradq[sbaseM+ 5*p_Np];
        s_gradqM[ 6][n] = gradq[sbaseM+ 6*p_Np];
        s_gradqM[ 7][n] = gradq[sbaseM+ 7*p_Np];
        s_gradqM[ 8][n] = gradq[sbaseM+ 8*p_Np];
        s_gradqM[ 9][n] = gradq[sbaseM+ 9*p_Np];
        s_gradqM[10][n] = gradq[sbaseM+10*p_Np];
        s_gradqM[11][n] = gradq[sbaseM+11*p_Np];
        s_gradqM[12][n] = gradq[sbaseM+12*p_Np];
        s_gradqM[13][n] = gradq[sbaseM+13*p_Np];
        s_gradqM[14][n] = gradq[sbaseM+14*p_Np];
        
        //
        s_gradqP[ 0][n] = gradq[sbaseP+ 0*p_Np];
        s_gradqP[ 1][n] = gradq[sbaseP+ 1*p_Np];
        s_gradqP[ 2][n] = gradq[sbaseP+ 2*p_Np];
        s_gradqP[ 3][n] = gradq[sbaseP+ 3*p_Np];
        s_gradqP[ 4][n] = gradq[sbaseP+ 4*p_Np];
        s_gradqP[ 5][n] = gradq[sbaseP+ 5*p_Np];
        s_gradqP[ 6][n] = gradq[sbaseP+ 6*p_Np];
        s_gradqP[ 7][n] = gradq[sbaseP+ 7*p_Np];
        s_gradqP[ 8][n] = gradq[sbaseP+ 8*p_Np];
        s_gradqP[ 9][n] = gradq[sbaseP+ 9*p_Np];
        s_gradqP[10][n] = gradq[sbaseP+10*p_Np];
        s_gradqP[11][n] = gradq[sbaseP+11*p_Np];
        s_gradqP[12][n] = gradq[sbaseP+12*p_Np];
        s_gradqP[13][n] = gradq[sbaseP+13*p_Np];
        s_gradqP[14][n] = gradq[sbaseP+14*p_Np];
      }
    }


    // interpolate to surface integration nodes
    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
      if(n<p_intNfpNfaces){
        // find face that owns this node
        const int face = n/p_intNfp;
        
        // indices of negative and positive traces of face node
        const dfloat gamma  = pCoeff[p_GMID]; // gamma
        const dfloat R      = pCoeff[p_RRID]; 
        const dfloat CP     = pCoeff[p_CPID]; 
        const dfloat CV     = pCoeff[p_CVID]; 
        const dfloat Pr     = pCoeff[p_PRID]; // Prandtl Number
        const dfloat beta   = pCoeff[p_BTID]; // LDG alternating upwinding
              dfloat tau    = pCoeff[p_TAID]; // LDG jump stabilizer

        dfloat muM = pCoeff[p_MUID]; // bulk viscosity
        dfloat muP = pCoeff[p_MUID]; // bulk viscosity

        // get boundary ids
        const int bc = EToB[face+p_Nfaces*e];

        // load surface geofactors for this face
        const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx   = sgeo[sid+p_NXID];
        const dfloat ny   = sgeo[sid+p_NYID];
        const dfloat nz   = sgeo[sid+p_NZID];
        const dfloat sJ   = sgeo[sid+p_SJID];
        const dfloat invJ = sgeo[sid+p_IJID];
        // const dfloat hinv = sgeo[sid+p_IHID];

        dfloat rrM  = 0., ruM = 0., rvM = 0., rwM = 0.,rEM = 0., rmu = 0.;
        dfloat rrP  = 0., ruP = 0., rvP = 0., rwP = 0.,rEP = 0.;
        
        // 
        dfloat drrdxM = 0., drrdyM = 0., drrdzM = 0.;
        dfloat drudxM = 0., drudyM = 0., drudzM = 0.;
        dfloat drvdxM = 0., drvdyM = 0., drvdzM = 0.;
        dfloat drwdxM = 0., drwdyM = 0., drwdzM = 0.;
        dfloat dredxM = 0., dredyM = 0., dredzM = 0.;
        // 
        dfloat drrdxP = 0., drrdyP = 0., drrdzP = 0.;
        dfloat drudxP = 0., drudyP = 0., drudzP = 0.;
        dfloat drvdxP = 0., drvdyP = 0., drvdzP = 0.;
        dfloat drwdxP = 0., drwdyP = 0., drwdzP = 0.;
        dfloat dredxP = 0., dredyP = 0., dredzP = 0.;

        // local block interpolation (face nodes to integration nodes)
        #pragma unroll p_Nfp
          for(int m=0;m<p_Nfp;++m){
            const dfloat iInm = intInterp[n+m*p_Nfaces*p_intNfp];
            const int fm = face*p_Nfp+m;
            rrM  += iInm*s_qM[0][fm];
            ruM  += iInm*s_qM[1][fm];
            rvM  += iInm*s_qM[2][fm];
            rwM  += iInm*s_qM[3][fm];
            rEM  += iInm*s_qM[4][fm];

            rrP  += iInm*s_qP[0][fm];
            ruP  += iInm*s_qP[1][fm];
            rvP  += iInm*s_qP[2][fm];
            rwP  += iInm*s_qP[3][fm];
            rEP  += iInm*s_qP[4][fm];

            drrdxM += iInm*s_gradqM[ 0][fm];
            drrdyM += iInm*s_gradqM[ 1][fm];
            drrdzM += iInm*s_gradqM[ 2][fm];
            
            drudxM += iInm*s_gradqM[ 3][fm];
            drudyM += iInm*s_gradqM[ 4][fm];
            drudzM += iInm*s_gradqM[ 5][fm];
            
            drvdxM += iInm*s_gradqM[ 6][fm];
            drvdyM += iInm*s_gradqM[ 7][fm];
            drvdzM += iInm*s_gradqM[ 8][fm];
            
            drwdxM += iInm*s_gradqM[ 9][fm];
            drwdyM += iInm*s_gradqM[10][fm];
            drwdzM += iInm*s_gradqM[11][fm];
            
            dredxM += iInm*s_gradqM[12][fm];
            dredyM += iInm*s_gradqM[13][fm];
            dredzM += iInm*s_gradqM[14][fm];

            drrdxP += iInm*s_gradqP[ 0][fm];
            drrdyP += iInm*s_gradqP[ 1][fm];
            drrdzP += iInm*s_gradqP[ 2][fm];
            
            drudxP += iInm*s_gradqP[ 3][fm];
            drudyP += iInm*s_gradqP[ 4][fm];
            drudzP += iInm*s_gradqP[ 5][fm];
            
            drvdxP += iInm*s_gradqP[ 6][fm];
            drvdyP += iInm*s_gradqP[ 7][fm];
            drvdzP += iInm*s_gradqP[ 8][fm];
            
            drwdxP += iInm*s_gradqP[ 9][fm];
            drwdyP += iInm*s_gradqP[10][fm];
            drwdzP += iInm*s_gradqP[11][fm];
            
            dredxP += iInm*s_gradqP[12][fm];
            dredyP += iInm*s_gradqP[13][fm];
            dredzP += iInm*s_gradqP[14][fm];
            
            rmu    += iInm*s_mu[fm];
          }

        // Check positivity
        #if POSITIVITY==1 
          rrM         = RMIN + LMAX(rrM-RMIN, ALPHA); 
          rrP         = RMIN + LMAX(rrP-RMIN, ALPHA); 
          dfloat drM  = SMOOTH(rrM-RMIN, ALPHA); 
          dfloat drP  = SMOOTH(rrP-RMIN, ALPHA); 
          drrdxM *=drM; drrdyM *=drM, drrdzM *=drM; 
          drrdxP *=drP; drrdyP *=drP, drrdzP *=drP; 
        #endif  


        // Obtain primite varibales
        dfloat irM = 1.0/rrM, uM  = ruM*irM,  vM  = rvM*irM,  wM  = rwM*irM;
        dfloat pM  = (gamma-1)*(rEM - 0.5*rrM*(uM*uM+vM*vM+wM*wM));

        // get temperature dependent viscosity for element
        if(p_viscType==2){ // Sutherland     
          const dfloat exp  = pCoeff[p_EXID]; // Exponential term
          const dfloat tr   = pCoeff[p_TRID]; // 1/Tref 
          const dfloat ts   = pCoeff[p_TSID]; // Ts/Tref
          const dfloat cs   = pCoeff[p_CSID]; // precomuted value to simlify
          const dfloat tnM  = (pM*irM/R)*tr;  // non-dimensional temp
          muM  = (tnM > ts) ? (muM*pow(tnM, exp)*(1.0+ts)/(tnM + ts)) : muM*tnM*cs;  
         }else if(p_viscType==3){ // Powerlaw
          const dfloat exp  = pCoeff[p_EXID]; // Exponential term
          const dfloat TempM  = pM*irM/R;      // Temperature
          muM = muM*pow(TempM, exp); 
        }

        const dfloat RBAR = flowStates[BCStateID*p_NsP + 0]; 
        const dfloat UBAR = flowStates[BCStateID*p_NsP + 1]; 
        const dfloat VBAR = flowStates[BCStateID*p_NsP + 2]; 
        const dfloat WBAR = flowStates[BCStateID*p_NsP + 3]; 
        const dfloat PBAR = flowStates[BCStateID*p_NsP + 4]; 
        const dfloat TBAR = flowStates[BCStateID*p_NsP + 5]; 

        const dlong idM = e*p_intNfpNfaces + n; 
         // apply boundary conditions for viscous flux and modify bc state after inviscid fluxes        
        if(bc>0){

          cnsInviscidBoundaryConditions3D(bc, gamma, R, CP, CV, muM, time, 
                                        RBAR, UBAR, VBAR, WBAR, PBAR, TBAR, 
                                        intx[idM], inty[idM], intz[idM], nx, ny, nz,  
                                        rrM, ruM, rvM, rwM, rEM, 
                                        &rrP, &ruP, &rvP, &rwP, &rEP); 
         }

        dfloat irP = 1.0/rrP, uP  = ruP*irP,  vP  = rvP*irP,  wP  = rwP*irP;
        dfloat pP  = (gamma-1)*(rEP - 0.5*rrP*(uP*uP+vP*vP+wP*wP));    

        // limit pressure
        #if POSITIVITY==1 
          // Limit and smooth pressure
          pM          = PMIN + LMAX(pM-PMIN, ALPHA); 
          pP          = PMIN + LMAX(pP-PMIN, ALPHA); 
          // reconstruct energy accordingly
          rEM = pM/(gamma-1.0) + 0.5f*rrM*(uM*uM+vM*vM+wM*wM); 
          rEP = pP/(gamma-1.0) + 0.5f*rrP*(uP*uP+vP*vP+wP*wP); 
        #endif       

      // // Compute inviscid fluxes
      dfloat rflux, ruflux, rvflux, rwflux, Eflux;
      upwindRoeAveraged(nx, ny, nz, gamma, rrM, uM, vM, wM, pM, rrP, uP, vP, wP, pP, 
                        &rflux, &ruflux, &rvflux, &rwflux, &Eflux);

      // upwindLaxFriedrichs(nx, ny, nz, gamma, 
      //                     rrM, uM, vM, wM, pM, 
      //                     rrP, uP, vP, wP, pP, 
      //                     &rflux, &ruflux, &rvflux,&rwflux, &Eflux);


        dfloat tauFlip  =  nx>= 0 ? 1.0 :-1.0;
        // dfloat tauFlip  =  0.0;

        // LDG Flipping 
        dfloat betaM = 0.5 - (nx>0 ? beta:-beta); 
        dfloat betaP = 0.5 + (nx>0 ? beta:-beta);

        if(bc>0){
          cnsViscousBoundaryConditions3D(bc, gamma, R, CP, CV, muM,time, 
                                        RBAR, UBAR, VBAR, WBAR, PBAR, TBAR, 
                                        intx[idM], inty[idM],  intz[idM],
                                        nx, ny, nz, 
                                        rrM, ruM, rvM, rwM, rEM, 
                                        &rrP, &ruP, &rvP, &rwP, &rEP, 
                                        drrdxM, drrdyM, drrdzM, 
                                        drudxM, drudyM, drudzM, 
                                        drvdxM, drvdyM, drvdzM, 
                                        drwdxM, drwdyM, drwdzM, 
                                        dredxM, dredyM, dredzM,
                                        &drrdxP, &drrdyP, &drrdzP, 
                                        &drudxP, &drudyP, &drudzP, 
                                        &drvdxP, &drvdyP, &drvdzP, 
                                        &drwdxP, &drwdyP, &drwdzP, 
                                        &dredxP, &dredyP, &dredzP);
          // betaM = 1.0;   betaP = 0.0; 

        }

        dfloat factor = 1.0; 
        // tweak bc's for laplacian term, instead of creating new bc set
        if(bc==11 || bc==12 || bc==13){factor =0; }

        // limit pressure
        #if POSITIVITY==1 
          // Limit and smooth pressure
          pP          = PMIN + LMAX(pP-PMIN, ALPHA); 
          // reconstruct energy accordingly
          // rEM = pM/(gamma-1.0) + 0.5f*rrM*(uM*uM+vM*vM); 
          rEP = pP/(gamma-1.0) + 0.5f*rrP*(uP*uP+vP*vP); 
        #endif       


        // Derivative of velocities
        const dfloat dudxM = (drudxM - drrdxM*uM)*irM;
        const dfloat dvdxM = (drvdxM - drrdxM*vM)*irM;
        const dfloat dwdxM = (drwdxM - drrdxM*wM)*irM;

        const dfloat dudyM = (drudyM - drrdyM*uM)*irM;
        const dfloat dvdyM = (drvdyM - drrdyM*vM)*irM;
        const dfloat dwdyM = (drwdyM - drrdyM*wM)*irM;
              
        const dfloat dudzM = (drudzM - drrdzM*uM)*irM;
        const dfloat dvdzM = (drvdzM - drrdzM*vM)*irM;
        const dfloat dwdzM = (drwdzM - drrdzM*wM)*irM;

              // Derivative of velocities
              dfloat dudxP = (drudxP - drrdxP*uP)*irP;
              dfloat dvdxP = (drvdxP - drrdxP*vP)*irP;
              dfloat dwdxP = (drwdxP - drrdxP*wP)*irP;

              dfloat dudyP = (drudyP - drrdyP*uP)*irP;
              dfloat dvdyP = (drvdyP - drrdyP*vP)*irP;
              dfloat dwdyP = (drwdyP - drrdyP*wP)*irP;
                    
              dfloat dudzP = (drudzP - drrdzP*uP)*irP;
              dfloat dvdzP = (drvdzP - drrdzP*vP)*irP;
              dfloat dwdzP = (drwdzP - drrdzP*wP)*irP;

        const dfloat TxM = (dredxM*irM - rEM*drrdxM*irM*irM - (uM*dudxM + vM*dvdxM + wM*dwdzM));
        const dfloat TyM = (dredyM*irM - rEM*drrdyM*irM*irM - (uM*dudyM + vM*dvdyM + wM*dwdzM));
        const dfloat TzM = (dredzM*irM - rEM*drrdzM*irM*irM - (uM*dudyM + vM*dvdyM + wM*dwdzM));
        
        const dfloat TxP = (dredxP*irP - rEP*drrdxP*irP*irP - (uP*dudxP + vP*dvdxP + wP*dwdzP));
        const dfloat TyP = (dredyP*irP - rEP*drrdyP*irP*irP - (uP*dudyP + vP*dvdyP + wP*dwdzP));
        const dfloat TzP = (dredzP*irP - rEP*drrdzP*irP*irP - (uP*dudyP + vP*dvdyP + wP*dwdzP));

        // get temperature dependent viscosity for neighbor
        if(p_viscType==2){ // Sutherland     
          const dfloat exp  = pCoeff[p_EXID]; // Exponential term
          const dfloat tr   = pCoeff[p_TRID]; // 1/Tref 
          const dfloat ts   = pCoeff[p_TSID]; // Ts/Tref
          const dfloat cs   = pCoeff[p_CSID]; // precomuted value to simlify
          const dfloat tnP   = pP*irP*tr/R; // non-dimensional temp
          muP  = (tnP > ts) ? (muP*pow(tnP, exp)*(1.0+ts)/(tnP + ts)) : muP*tnP*cs;  
        }else if(p_viscType==3){ // Powerlaw 
          // mu = mu_ref * (T/Tref)**exp = (mu_ref/T_ref**exp) * T**exp = ( mu )* T**exp
          const dfloat exp  = pCoeff[p_EXID]; // Exponential term
          const dfloat TempP  = pP*irP/R;       // Temperature
          muP = muP*pow(TempP, exp); 
        }

        const dfloat sbeta  = 2.0/3.0; 
        const dfloat sdivM  = (dudxM+dvdyM+dwdzM);  
        const dfloat sdivP  = (dudxP+dvdyP+dwdzP);  

        dfloat T01M = 0., T02M = 0., T03M = 0.; 
        
        dfloat T11M = muM*(2.0*dudxM - sbeta*sdivM);
        dfloat T12M = muM*(dudyM+dvdxM);
        dfloat T13M = muM*(dudzM+dwdxM);

        dfloat T21M = T12M;
        dfloat T22M = muM*(2.0*dvdyM - sbeta*sdivM);
        dfloat T23M = muM*(dvdzM+dwdyM);

        dfloat T31M = T13M;
        dfloat T32M = T23M; 
        dfloat T33M = muM*(2.0*dwdzM - sbeta*sdivM);
        //
        const dfloat kappaM = CP*muM/Pr;
        dfloat T41M = uM*T11M + vM*T12M + wM*T13M + kappaM*TxM;
        dfloat T42M = uM*T21M + vM*T22M + wM*T23M + kappaM*TyM;
        dfloat T43M = uM*T31M + vM*T32M + wM*T33M + kappaM*TzM;

        //
        dfloat T01P = 0., T02P = 0., T03P = 0.; 
        
        dfloat T11P = muP*(2.0*dudxP - sbeta*sdivP);
        dfloat T12P = muP*(dudyP+dvdxP);
        dfloat T13P = muP*(dudzP+dwdxP);

        dfloat T21P = T12P;
        dfloat T22P = muP*(2.0*dvdyP - sbeta*sdivP);
        dfloat T23P = muP*(dvdzP+dwdyP);

        dfloat T31P = T13P;
        dfloat T32P = T23P; 
        dfloat T33P = muP*(2.0*dwdzP - sbeta*sdivP);
        //
        const dfloat kappaP = CP*muP/Pr;
        dfloat T41P = uP*T11P + vP*T12P + wP*T13P+kappaP*TxP;
        dfloat T42P = uP*T21P + vP*T22P + wP*T23P+kappaP*TyP;
        dfloat T43P = uP*T31P + vP*T32P + wP*T33P+kappaP*TzP;

        // add artificial viscosity
        T01M += rmu*drrdxM, T02M += rmu*drrdyM, T03M+=rmu*drrdzM;
        T11M += rmu*drudxM, T12M += rmu*drudyM, T13M+=rmu*drudzM;
        T21M += rmu*drvdxM, T22M += rmu*drvdyM, T23M+=rmu*drvdzM;
        T31M += rmu*drwdxM, T32M += rmu*drwdyM, T33M+=rmu*drwdzM;
        T41M += rmu*dredxM, T42M += rmu*dredyM, T43M+=rmu*dredzM;           
        // add artificial viscosity
        T01P += factor*rmu*drrdxP, T02P += factor*rmu*drrdyP, T03P+=factor*rmu*drrdzP;
        T11P += factor*rmu*drudxP, T12P += factor*rmu*drudyP, T13P+=factor*rmu*drudzP;
        T21P += factor*rmu*drvdxP, T22P += factor*rmu*drvdyP, T23P+=factor*rmu*drvdzP;
        T31P += factor*rmu*drwdxP, T32P += factor*rmu*drwdyP, T33P+=factor*rmu*drwdzP;
        T41P += factor*rmu*dredxP, T42P += factor*rmu*dredyP, T43P+=factor*rmu*dredzP;       

        // const dfloat alphaM = 0.5 - beta, alphaP = 0.5 + beta;  
        // const dfloat alphaM = 0.5 - beta, alphaP = 0.5 + beta;  
        rflux  -= (nx*(betaM*T01M+betaP*T01P)+ny*(betaM*T02M+betaP*T02P)+nz*(betaM*T03M+betaP*T03P) + tauFlip*tau*(rrM-rrP)); 
        ruflux -= (nx*(betaM*T11M+betaP*T11P)+ny*(betaM*T12M+betaP*T12P)+nz*(betaM*T13M+betaP*T13P) + tauFlip*tau*(ruM-ruP)); 
        rvflux -= (nx*(betaM*T21M+betaP*T21P)+ny*(betaM*T22M+betaP*T22P)+nz*(betaM*T23M+betaP*T23P) + tauFlip*tau*(rvM-rvP)); 
        rwflux -= (nx*(betaM*T31M+betaP*T31P)+ny*(betaM*T32M+betaP*T32P)+nz*(betaM*T33M+betaP*T33P) + tauFlip*tau*(rwM-rwP)); 
        Eflux  -= (nx*(betaM*T41M+betaP*T41P)+ny*(betaM*T42M+betaP*T42P)+nz*(betaM*T43M+betaP*T43P) + tauFlip*tau*(rEM-rEP)); 

        // evaluate "flux" terms and move to rhs 
        const dfloat sc = invJ*sJ;
        s_rflux[n]  = sc*(-rflux );
        s_ruflux[n] = sc*(-ruflux);
        s_rvflux[n] = sc*(-rvflux);
        s_rwflux[n] = sc*(-rwflux);
        s_Eflux[n]  = sc*(-Eflux);
      }
    }

    // wait for all @shared memory writes of the previous inner loop to complete

    // for each node in the element
    for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
      if(n<p_Np){
        // load rhs data from volume fluxes
        dfloat Lrflux = 0.f, Lruflux = 0.f, Lrvflux = 0.f,  Lrwflux = 0.f, LEflux = 0.f;
        // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
        #pragma unroll p_intNfpNfaces
          for(int m=0;m<p_intNfpNfaces;++m){
            const dfloat L = intLIFT[n+m*p_Np];
            Lrflux  += L*s_rflux[m];
            Lruflux += L*s_ruflux[m];
            Lrvflux += L*s_rvflux[m];
            Lrwflux += L*s_rwflux[m];
            LEflux  += L*s_Eflux[m];
          }
        // move to rhs
        const dlong base = e*p_Np*p_Nfields+n;
        rhsq[base+0*p_Np] += Lrflux;
        rhsq[base+1*p_Np] += Lruflux;
        rhsq[base+2*p_Np] += Lrvflux;
        rhsq[base+3*p_Np] += Lrwflux;
        rhsq[base+4*p_Np] += LEflux;
      }
    }
  }
}