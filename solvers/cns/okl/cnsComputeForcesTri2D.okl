/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

@kernel void cnsComputeForcesTri2D(const dlong Nelements,
                                  @restrict const  dfloat *  vgeo,
                                  @restrict const  dfloat *  sgeo,
                                  @restrict const  dfloat *  D,
                                  @restrict const  dfloat *  SM,
                                  @restrict const  dlong  *  vmapM,
                                  @restrict const  int    *  EToB,
                                  @restrict const  dfloat *  x,
                                  @restrict const  dfloat *  y,
                                  @restrict const  dfloat *  z,
                                  @restrict const  dfloat * pCoeff,
                                  @restrict const  dfloat *  q,
                                  @restrict        dfloat *  F){

  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared dfloat s_u[p_Np];
    @shared dfloat s_v[p_Np];

    @exclusive int is_wall_bc; 
    @exclusive dfloat r_dudx, r_dudy, r_dvdx, r_dvdy, r_p; 

    // not sure if we enforce single boundary face per element!
    @shared dfloat s_vFx[p_maxNodes];
    @shared dfloat s_vFy[p_maxNodes];
    @shared dfloat s_pFx[p_maxNodes];
    @shared dfloat s_pFy[p_maxNodes];

    #define s_dudx s_vFx 
    #define s_dudy s_vFy 
    #define s_dvdx s_pFx 
    #define s_dvdy s_pFy 

    // Check if this element has wall bc
     for(int n=0;n<p_maxNodes;++n;@inner(0)){
      is_wall_bc = 0; 
      for(int face=0; face<p_Nfaces; face++){
        const int bc = EToB[face+p_Nfaces*e];
        if(bc==11 || bc==12){ is_wall_bc = 1;}
      }   
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np && is_wall_bc==1){
        const dlong qbase = e*p_Nfields*p_Np + n;
        const dfloat rr = q[qbase + 0*p_Np];
        const dfloat ru = q[qbase + 1*p_Np];
        const dfloat rv = q[qbase + 2*p_Np];
        s_u[n] = ru/rr; 
        s_v[n] = rv/rr; 
      }
    }

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_Np && is_wall_bc){
          dfloat dudr = 0., duds = 0.;
          dfloat dvdr = 0., dvds = 0.;
          for(int i=0;i<p_Np;++i){
            const dfloat Drni = D[n+i*p_Np+0*p_Np*p_Np];
            const dfloat Dsni = D[n+i*p_Np+1*p_Np*p_Np];
            const dfloat u = s_u[i];
            const dfloat v = s_v[i];
            dudr += Drni*u, duds += Dsni*u;
            dvdr += Drni*v, dvds += Dsni*v;
          }
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          //
          s_dudx[n] = drdx*dudr + dsdx*duds;
          s_dudy[n] = drdy*dudr + dsdy*duds;
          s_dvdx[n] = drdx*dvdr + dsdx*dvds;
          s_dvdy[n] = drdy*dvdr + dsdy*dvds;
      }
    }
    

    // save to registers
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp && is_wall_bc){
        const dfloat gamma = pCoeff[p_GMID]; // gamma
        const dlong id  = e*p_Nfp*p_Nfaces + n;
        const dlong idM = vmapM[id];
        // local id belongs to e
        const int vidM = idM%p_Np;
        // base for field varibale
        const dlong qbase = e*p_Np*p_Nfields + vidM;

        dfloat rr = q[qbase + 0*p_Np];
        dfloat ru = q[qbase + 1*p_Np];
        dfloat rv = q[qbase + 2*p_Np];
        dfloat rE = q[qbase + 3*p_Np];

        dfloat ir = 1.0/rr, u  = ru*ir,  v  = rv*ir;

        r_p    = (gamma-1)*(rE - 0.5*rr*(u*u+v*v));
        r_dudx = s_dudx[vidM];
        r_dudy = s_dudy[vidM];
        r_dvdx = s_dvdx[vidM];
        r_dvdy = s_dvdy[vidM];
      }
    }

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp && is_wall_bc){
        const dlong id  = e*p_Nfp*p_Nfaces + n;
        const dlong idM = vmapM[id];
        
        
        const int face = n/p_Nfp;
        const int bc   = EToB[face+p_Nfaces*e];

        // load surface geofactors for this face
        const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx   = sgeo[sid+p_NXID];
        const dfloat ny   = sgeo[sid+p_NYID];
        const dfloat sJ   = sgeo[sid+p_SJID];

        dfloat mu          = pCoeff[p_MUID]; // bulk viscosity
        const dfloat sbeta = 2.0/3.0; 
        dfloat T11 = mu*(2.0*r_dudx - sbeta*(r_dudx+r_dvdy));
        dfloat T12 = mu*(r_dudy+r_dvdx);
        dfloat T22 = mu*(2.0*r_dvdy - sbeta*(r_dudx+r_dvdy));

        s_vFx[n] = (bc==11 || bc==12) ? sJ*(mu*(nx*T11 + ny*T12)): 0.0; 
        s_vFy[n] = (bc==11 || bc==12) ? sJ*(mu*(nx*T12 + ny*T22)): 0.0; 
        s_pFx[n] = (bc==11 || bc==12) ? sJ*(-r_p*nx): 0.0; 
        s_pFy[n] = (bc==11 || bc==12) ? sJ*(-r_p*ny): 0.0; 
      }
    }


    // for each node in the element
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        if(is_wall_bc){
          dfloat vfxI  = 0.f, vfyI = 0.f, pfxI = 0.f,  pfyI = 0.f;
            #pragma unroll p_NfacesNfp
            for(int m=0;m<p_NfacesNfp;++m){
              const dfloat sM = SM[n+m*p_Np];
              vfxI     += sM*s_vFx[m];
              vfyI     += sM*s_vFy[m];
              pfxI     += sM*s_pFx[m];
              pfyI     += sM*s_pFy[m];
            }
          const dlong shift = Nelements*p_Np;
          F[e*p_Np+n+0*shift] = vfxI; 
          F[e*p_Np+n+1*shift] = vfyI;
          F[e*p_Np+n+2*shift] = pfxI;
          F[e*p_Np+n+3*shift] = pfyI;
        }else{
         const dlong shift = Nelements*p_Np;
          F[e*p_Np +n + 0*shift] = 0.0; 
          F[e*p_Np +n + 1*shift] = 0.0;
          F[e*p_Np +n + 2*shift] = 0.0;
          F[e*p_Np +n + 3*shift] = 0.0;
        }
      }
    }  
  }
}


@kernel void cnsComputeMomentsTri2D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  sgeo,
                                    @restrict const  dfloat *  D,
                                    @restrict const  dfloat *  SM,
                                    @restrict const  dlong  *  vmapM,
                                    @restrict const  int    *  EToB,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    @restrict const  dfloat *  XC,  
                                    @restrict const  dfloat * pCoeff,
                                    @restrict const  dfloat *  q,
                                    @restrict        dfloat *  F){
  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared dfloat s_u[p_Np];
    @shared dfloat s_v[p_Np];

    @exclusive int is_wall_bc; 
    @exclusive dfloat r_dudx, r_dudy, r_dvdx, r_dvdy, r_p; 

    @shared dfloat s_dudx[p_maxNodes];
    @shared dfloat s_dudy[p_maxNodes];
    @shared dfloat s_dvdx[p_maxNodes];
    @shared dfloat s_dvdy[p_maxNodes];

    #define s_Mz s_dudx 

    // Check if this element has wall bc
     for(int n=0;n<p_maxNodes;++n;@inner(0)){
      is_wall_bc = 0; 
      for(int face=0; face<p_Nfaces; face++){
        const int bc = EToB[face+p_Nfaces*e];
        if(bc==11 || bc==12){ is_wall_bc = 1;}
      }   
    }


    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np && is_wall_bc==1){
        const dlong qbase = e*p_Nfields*p_Np + n;
        const dfloat rr = q[qbase + 0*p_Np];
        const dfloat ru = q[qbase + 1*p_Np];
        const dfloat rv = q[qbase + 2*p_Np];
        s_u[n] = ru/rr; 
        s_v[n] = rv/rr; 
      }
    }

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_Np && is_wall_bc){
          dfloat dudr = 0., duds = 0.;
          dfloat dvdr = 0., dvds = 0.;
          for(int i=0;i<p_Np;++i){
            const dfloat Drni = D[n+i*p_Np+0*p_Np*p_Np];
            const dfloat Dsni = D[n+i*p_Np+1*p_Np*p_Np];
            const dfloat u = s_u[i];
            const dfloat v = s_v[i];
            dudr += Drni*u, duds += Dsni*u;
            dvdr += Drni*v, dvds += Dsni*v;
          }
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          //
          s_dudx[n] = drdx*dudr + dsdx*duds;
          s_dudy[n] = drdy*dudr + dsdy*duds;
          s_dvdx[n] = drdx*dvdr + dsdx*dvds;
          s_dvdy[n] = drdy*dvdr + dsdy*dvds;
      }
    }
    

    // save to registers
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp && is_wall_bc){
        const dfloat gamma = pCoeff[p_GMID]; // gamma
        const dlong id  = e*p_Nfp*p_Nfaces + n;
        const dlong idM = vmapM[id];
        // local id belongs to e
        const int vidM = idM%p_Np;
        // base for field varibale
        const dlong qbase = e*p_Np*p_Nfields + vidM;

        dfloat rr = q[qbase + 0*p_Np];
        dfloat ru = q[qbase + 1*p_Np];
        dfloat rv = q[qbase + 2*p_Np];
        dfloat rE = q[qbase + 3*p_Np];

        dfloat ir = 1.0/rr, u  = ru*ir,  v  = rv*ir;

        r_p    = (gamma-1)*(rE - 0.5*rr*(u*u+v*v));
        r_dudx = s_dudx[vidM];
        r_dudy = s_dudy[vidM];
        r_dvdx = s_dvdx[vidM];
        r_dvdy = s_dvdy[vidM];
      }
    }

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp && is_wall_bc){
        const dlong id  = e*p_Nfp*p_Nfaces + n;
        const dlong idM = vmapM[id];
        
        dfloat mu    = pCoeff[p_MUID]; // bulk viscosity
        
        const int face = n/p_Nfp;
        const int bc   = EToB[face+p_Nfaces*e];

        // load surface geofactors for this face
        const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx   = sgeo[sid+p_NXID];
        const dfloat ny   = sgeo[sid+p_NYID];
        
        const dfloat sJ   = sgeo[sid+p_SJID];
        // const dfloat invJ = sgeo[sid+p_IJID];
        
        const dfloat xf   = x[idM]; 
        const dfloat yf   = y[idM];
      
        const dfloat sbeta = 2.0/3.0; 
        dfloat T11 = mu*(2.0*r_dudx - sbeta*(r_dudx+r_dvdy));
        dfloat T12 = mu*(r_dudy+r_dvdx);
        dfloat T22 = mu*(2.0*r_dvdy - sbeta*(r_dudx+r_dvdy));

        const dfloat xc = XC[0]; 
        const dfloat yc = XC[1]; 

        const dfloat fx = -r_p*nx + mu*(nx*T11 + ny*T12); 
        const dfloat fy = -r_p*ny + mu*(nx*T12 + ny*T22);
        const dfloat Mz  = fx*(yf-yc) - fy*(xf-xc); 

        s_Mz[n] = (bc==11 || bc==12) ? sJ*Mz:0.0; 
      }
    }


    // for each node in the element
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        if(is_wall_bc){
          dfloat mzI  = 0.f;
            #pragma unroll p_NfacesNfp
            for(int m=0;m<p_NfacesNfp;++m){
              const dfloat sM = SM[n+m*p_Np];
              mzI     += sM*s_Mz[m];
            }
          //!!!!!!!!!!!!!!!!!!!!!! hard coded !!!!!!!!!!!!!!!//
          const dlong shift = Nelements*p_Np;
          F[e*p_Np+n+0*shift] = mzI; 
        }else{
         const dlong shift = Nelements*p_Np;
          F[e*p_Np +n + 0*shift] = 0.0; 
        }
      }
    }  
  }
}