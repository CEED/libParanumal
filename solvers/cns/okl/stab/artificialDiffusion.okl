// @kernel void computeViscosity(const dlong N,
//                                const dfloat alpha,
//                                @restrict const dfloat *viscActivation, 
//                                @restrict const dfloat *viscScale, 
//                                @restrict       dfloat *visc){
//  for(dlong n=0;n<N;++n;@tile(p_blockSize,@outer,@inner)){
//   const int e     = int(n/s_Nverts); 
//   const int vid   = int(n%s_Nverts); 
//   const dfloat scale = viscScale[e]; // h

//   const dlong id     = e*s_Nverts + vid; 
//   dfloat ramp        = viscActivation[e]; // f(s)
//   visc[n]            = alpha*scale*ramp;  // alpha*h/N * f(s)
//   }
// }

@kernel void computeViscosity(const dlong N,
                               const dfloat alpha,
                               @restrict const dfloat *viscActivation, 
                               @restrict const dfloat *viscScale, 
                               @restrict const dfloat *Vmax, 
                               @restrict       dfloat *visc){
 for(dlong n=0;n<N;++n;@tile(p_blockSize,@outer,@inner)){
  const int e         = int(n/s_Nverts); 
  const int vid       = int(n%s_Nverts); 
  const dfloat scale  = viscScale[e]; // h
  const dfloat vmax   = Vmax[e]; // h

  const dlong id      = e*s_Nverts + vid; 
  dfloat ramp         = viscActivation[e]; // f(s)
  visc[n]             = alpha*scale*vmax*ramp;  // alpha*h/N * f(s)
  }
}



@kernel void projectViscosity(const dlong Nelements,
                              @restrict const  dfloat *  pM,
                              @restrict const  dfloat *  vq,
                              @restrict        dfloat *  q){

  for(dlong e=0;e<Nelements;e++; @outer(0)){  // for all elements
    @shared dfloat s_q[s_Nverts];

    for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element    
      if(n<s_Nverts){    
          s_q[n] = vq[e*s_Nverts + n];
      }
    }

    for(int n=0;n<p_Np;++n;@inner(0)){     // for all nodes in this element      
      dfloat r_qM=0;
        #pragma unroll s_Nverts
        for (int k=0;k<s_Nverts;k++) {
             r_qM += pM[n+k*p_Np]*s_q[k];
        }
        
        q[e*p_Np + n] = r_qM;
                  
      }
    }
  }