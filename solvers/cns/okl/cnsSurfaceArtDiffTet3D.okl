/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
#define RMIN 0.01
#define PMIN 0.01
#define ALPHA 100

#define POSITIVITY 1

// Regularization of rho / p  (cannot be smaller than rmin / pmin)
dfloat LMAX(const dfloat x, const dfloat alpha){
  dfloat xlim = x*(atan(alpha*x)/M_PI + 0.5) - atan(alpha)/M_PI + 0.5;
  return xlim;
}

// Density / pressure sensor for gradients...
dfloat SMOOTH(const dfloat x, const dfloat alpha){
 dfloat dx = atan(alpha*x)/M_PI + alpha*x/(M_PI*(alpha*alpha*x*x + 1.0)) + 0.5;
  return dx; 
}

// Roe averaged Riemann solver
void upwindRoeAveraged(const dfloat nx,
                       const dfloat ny,
                       const dfloat nz,
                       const dfloat gamma,
                       const dfloat rM,
                       const dfloat uM,
                       const dfloat vM,
                       const dfloat wM,
                       const dfloat pM,
                       const dfloat rP,
                       const dfloat uP,
                       const dfloat vP,
                       const dfloat wP,
                       const dfloat pP,
                       dfloat *rflux,
                       dfloat *ruflux,
                       dfloat *rvflux,
                       dfloat *rwflux,
                       dfloat *Eflux){

  const dfloat EM = pM/(gamma-1) + 0.5*rM*(uM*uM+vM*vM+wM*wM);
  const dfloat EP = pP/(gamma-1) + 0.5*rP*(uP*uP+vP*vP+wP*wP);
  const dfloat HM = (EM+pM)/rM;
  const dfloat HP = (EP+pP)/rP;

  // Compute Roe average variables
  const dfloat sqrtrM = sqrt(rM);
  const dfloat sqrtrP = sqrt(rP);

  const dfloat r = sqrtrM*sqrtrP;
  const dfloat u = (sqrtrM*uM + sqrtrP*uP)/(sqrtrM + sqrtrP);
  const dfloat v = (sqrtrM*vM + sqrtrP*vP)/(sqrtrM + sqrtrP);
  const dfloat w = (sqrtrM*wM + sqrtrP*wP)/(sqrtrM + sqrtrP);
  const dfloat H = (sqrtrM*HM + sqrtrP*HP)/(sqrtrM + sqrtrP);

  const dfloat c2 = (gamma-1)*(H-0.5*(u*u+v*v+w*w));
  const dfloat c = sqrt(c2);

  // normal velocity
  const dfloat qP = nx*uP+ny*vP+nz*wP;
  const dfloat qM = nx*uM+ny*vM+nz*wM;
  const dfloat q  = nx*u +ny*v +nz*w;

  // jump terms
  const dfloat dp = pP-pM;
  const dfloat dr = rP-rM;
  const dfloat du = uP-uM;
  const dfloat dv = vP-vM;
  const dfloat dw = wP-wM;
  const dfloat dq = qP-qM;

  const dfloat W1 = fabs(q-c) * 0.5*(dp-r*c*dq)/(c2);
  const dfloat W2 = fabs(q  ) * r;
  const dfloat W3 = fabs(q+c) * 0.5*(dp+r*c*dq)/(c2);
  const dfloat W4 = fabs(q  ) * (dr-(dp/c2));

  // Fluxes from traces n.F(uP) and n.F(uM)
  *rflux  = 0.5*((rP*qP         ) - (rM*qM         ));
  *ruflux = 0.5*((rP*uP*qP+nx*pP) - (rM*uM*qM+nx*pM));
  *rvflux = 0.5*((rP*vP*qP+ny*pP) - (rM*vM*qM+ny*pM));
  *rwflux = 0.5*((rP*wP*qP+nz*pP) - (rM*wM*qM+nz*pM));
  *Eflux  = 0.5*((qP*(EP+pP)    ) - (qM*(EM+pM)    ));

  // Roe flux
  *rflux  -= 0.5*(W1*1.0      + W2*0.0                   + W3*1.0      + W4*1.0              );
  *ruflux -= 0.5*(W1*(u-nx*c) + W2*(du-nx*dq)            + W3*(u+nx*c) + W4*u                );
  *rvflux -= 0.5*(W1*(v-ny*c) + W2*(dv-ny*dq)            + W3*(v+ny*c) + W4*v                );
  *rwflux -= 0.5*(W1*(w-nz*c) + W2*(dw-nz*dq)            + W3*(w+nz*c) + W4*w                );
  *Eflux  -= 0.5*(W1*(H- q*c) + W2*(u*du+v*dv+w*dw-q*dq) + W3*(H+ q*c) + W4*0.5*(u*u+v*v+w*w));
}


// batch process elements
@kernel void cnsSurfaceArtificialDiffusionLaplaceTet3D(const dlong Nelements,
                                                @restrict const  dfloat *  sgeo,
                                                @restrict const  dfloat *  LIFT,
                                                @restrict const  dlong  *  vmapM,
                                                @restrict const  dlong  *  vmapP,
                                                @restrict const  int    *  EToB,
                                                @restrict const  dfloat *  x,
                                                @restrict const  dfloat *  y,
                                                @restrict const  dfloat *  z,
                                                @restrict const dfloat *pCoeff,
                                                const dfloat time,
                                                @restrict const  dfloat *  aMu,
                                                @restrict const  dfloat *  q,
                                                @restrict const  dfloat *  gradq,
                                                @restrict dfloat *  rhsq){
  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_rflux [p_NfacesNfp];
    @shared dfloat s_ruflux[p_NfacesNfp];
    @shared dfloat s_rvflux[p_NfacesNfp];
    @shared dfloat s_rwflux[p_NfacesNfp];
    @shared dfloat s_Eflux [p_NfacesNfp];
    for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
      if(n<p_NfacesNfp){
        // find face that owns this node
        const int face = n/p_Nfp;
         // indices of negative and positive traces of face node
        const dfloat gamma  = pCoeff[p_GMID]; // gamma
        const dfloat R      = pCoeff[p_RRID]; 
        const dfloat CP     = pCoeff[p_CPID]; 
        const dfloat CV     = pCoeff[p_CVID]; 
        const dfloat Pr     = pCoeff[p_PRID]; // Prandtl Number
        const dfloat beta   = pCoeff[p_BTID]; // LDG alternating upwinding
        const dfloat tau    = pCoeff[p_TAID]; // LDG jump stabilizer

        // get boundary ids
        const int bc = EToB[face+p_Nfaces*e];

        dfloat muM = pCoeff[p_MUID]; // bulk viscosity
        dfloat muP = pCoeff[p_MUID]; // bulk viscosity

        // load surface geofactors for this face
        const dlong sid    = p_Nsgeo*(e*p_Nfaces+face);
        const dfloat nx   = sgeo[sid+p_NXID];
        const dfloat ny   = sgeo[sid+p_NYID];
        const dfloat nz   = sgeo[sid+p_NZID];
        const dfloat sJ   = sgeo[sid+p_SJID];
        const dfloat invJ = sgeo[sid+p_IJID];

        // indices of negative and positive traces of face node
        const dlong id  = e*p_Nfp*p_Nfaces + n;
        const dlong idM = vmapM[id];
        const dlong idP = vmapP[id];

        // load traces
        const dlong eM = e;
        const dlong eP = idP/p_Np;
        const int vidM = idM%p_Np;
        const int vidP = idP%p_Np;
        // load artificial diffusion
        const dfloat amuM = aMu[eM*p_Np+vidM];
        const dfloat amuP = aMu[eP*p_Np+vidP];

        const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
        const dlong qbaseP = eP*p_Np*p_Nfields + vidP;
        const dlong sbaseM = eM*p_Np*p_Ngrads  + vidM;
        const dlong sbaseP = eP*p_Np*p_Ngrads  + vidP;

        dfloat rrM = q[qbaseM + 0*p_Np];
        dfloat ruM = q[qbaseM + 1*p_Np];
        dfloat rvM = q[qbaseM + 2*p_Np];
        dfloat rwM = q[qbaseM + 3*p_Np];
        dfloat rEM = q[qbaseM + 4*p_Np];

        // Get conservative fields
        dfloat rrP = q[qbaseP + 0*p_Np];
        dfloat ruP = q[qbaseP + 1*p_Np];
        dfloat rvP = q[qbaseP + 2*p_Np];
        dfloat rwP = q[qbaseP + 3*p_Np];
        dfloat rEP = q[qbaseP + 4*p_Np];

              
        dfloat drM = 1.0; 
        #if POSITIVITY==1 
          rrM         = RMIN + LMAX(rrM-RMIN, ALPHA); 
          drM         = SMOOTH(rrM-RMIN, ALPHA); 
        #endif

        // Get gradients
        const dfloat drrdxM = drM*gradq[sbaseM+ 0*p_Np];
        const dfloat drrdyM = drM*gradq[sbaseM+ 1*p_Np];
        const dfloat drrdzM = drM*gradq[sbaseM+ 2*p_Np];

        const dfloat drudxM =     gradq[sbaseM+ 3*p_Np];
        const dfloat drudyM =     gradq[sbaseM+ 4*p_Np];
        const dfloat drudzM =     gradq[sbaseM+ 5*p_Np];

        const dfloat drvdxM =     gradq[sbaseM+ 6*p_Np];
        const dfloat drvdyM =     gradq[sbaseM+ 7*p_Np];
        const dfloat drvdzM =     gradq[sbaseM+ 8*p_Np];

        const dfloat drwdxM =     gradq[sbaseM+ 9*p_Np];
        const dfloat drwdyM =     gradq[sbaseM+10*p_Np];
        const dfloat drwdzM =     gradq[sbaseM+11*p_Np];

        const dfloat dredxM =     gradq[sbaseM+12*p_Np];
        const dfloat dredyM =     gradq[sbaseM+13*p_Np];
        const dfloat dredzM =     gradq[sbaseM+14*p_Np];

        // limit density
        dfloat drP = 1.0; 
        #if POSITIVITY==1 
        rrP         = RMIN + LMAX(rrP-RMIN, ALPHA); 
        drP         = SMOOTH(rrP-RMIN, ALPHA); 
        #endif


         // Get gradients
        dfloat drrdxP = drP*gradq[sbaseP+ 0*p_Np];
        dfloat drrdyP = drP*gradq[sbaseP+ 1*p_Np];
        dfloat drrdzP = drP*gradq[sbaseP+ 2*p_Np];

        dfloat drudxP =     gradq[sbaseP+ 3*p_Np];
        dfloat drudyP =     gradq[sbaseP+ 4*p_Np];
        dfloat drudzP =     gradq[sbaseP+ 5*p_Np];

        dfloat drvdxP =     gradq[sbaseP+ 6*p_Np];
        dfloat drvdyP =     gradq[sbaseP+ 7*p_Np];
        dfloat drvdzP =     gradq[sbaseP+ 8*p_Np];

        dfloat drwdxP =     gradq[sbaseP+ 9*p_Np];
        dfloat drwdyP =     gradq[sbaseP+10*p_Np];
        dfloat drwdzP =     gradq[sbaseP+11*p_Np];

        dfloat dredxP =     gradq[sbaseP+12*p_Np];
        dfloat dredyP =     gradq[sbaseP+13*p_Np];
        dfloat dredzP =     gradq[sbaseP+14*p_Np];

        // First evaluate inviscid Riemann solve
        if(bc>0){
          cnsInviscidBoundaryConditions3D(bc, gamma, R, CP, CV, muM,
                                  time, x[idM], y[idM], z[idM], nx, ny, nz,  
                                  rrM, ruM, rvM, rwM, rEM, &rrP, &ruP, &rvP, &rwP, &rEP);
        }


        // Obtain primite varibales
        const dfloat irM = 1.0/rrM;    
        const dfloat uM  = ruM*irM, vM  = rvM*irM, wM  = rwM*irM;
              dfloat pM  = (gamma-1)*(rEM - 0.5*rrM*(uM*uM+vM*vM+wM*wM));     
        
        // Obtain primite varibales
        dfloat irP = 1.0/rrP;    
        dfloat uP  = ruP*irP, vP  = rvP*irP, wP  = rwP*irP;
        dfloat pP  = (gamma-1)*(rEP - 0.5*rrP*(uP*uP+vP*vP+wP*wP));    

        // limit pressure
        // dfloat dpP = 1.0; 
        #if POSITIVITY==1 
          // Limit and smooth pressure
          pM          = PMIN + LMAX(pM-PMIN, ALPHA); 
          pP          = PMIN + LMAX(pP-PMIN, ALPHA); 
          // reconstruct energy accordingly
          rEM = pM/(gamma-1.0) + 0.5f*rrM*(uM*uM+vM*vM+wM*wM); 
          rEP = pP/(gamma-1.0) + 0.5f*rrP*(uP*uP+vP*vP+wP*wP); 
        #endif 

        dfloat rflux, ruflux, rvflux, rwflux, Eflux;
        upwindRoeAveraged(nx, ny, nz, gamma,
                          rrM, ruM, rvM, rwM, pM, rrP, ruP, rvP, rwP, pP,
                          &rflux, &ruflux, &rvflux, &rwflux, &Eflux);


        if(p_viscType==2){ // Sutherland     
          const dfloat exp  = pCoeff[p_EXID]; // Exponential term
          const dfloat tr   = pCoeff[p_TRID]; // 1/Tref 
          const dfloat ts   = pCoeff[p_TSID]; // Ts/Tref
          const dfloat cs   = pCoeff[p_CSID]; // precomuted value to simlify
          const dfloat tnM  = (pM*irM/R)*tr;  // non-dimensional temp
          muM  = (tnM > ts) ? (muM*pow(tnM, exp)*(1.0+ts)/(tnM + ts)) : muM*tnM*cs;  
        }else if(p_viscType==3){ // Powerlaw
          const dfloat exp  = pCoeff[p_EXID]; // Exponential term
          const dfloat TempM  = pM*irM/R;      // Temperature
          muM = muM*pow(TempM, exp); 
        }


       // apply boundary condition given in primitive variables
          if(bc>0) {
              cnsViscousBoundaryConditions3D(bc, gamma, R, CP, CV, mu, time, 
                               x[idM], y[idM], z[idM], nx, ny, nz,
                               rrM, ruM, rvM, rwM, rEM, 
                               &rrP, &ruP, &rvP, &rwP, &rEP, 
                               drrdxM, drrdyM, drrdzM, 
                               drudxM, drudyM, drudzM, 
                               drvdxM, drvdyM, drvdzM, 
                               drwdxM, drwdyM, drwdzM, 
                               dredxM, dredyM, dredzM,
                               &drrdxP, &drrdyP, &drrdzP, 
                               &drudxP, &drudyP, &drudzP, 
                               &drvdxP, &drvdyP, &drvdzP, 
                               &drwdxP, &drwdyP, &drwdzP, 
                               &dredxP, &dredyP, &dredzP);

            // update  primite variables           
            irP = 1.0/rrP, uP  = ruP*irP,  vP  = rvP*irP,  wP  = rwP*irP;
            pP  = (gamma-1)*(rEP - 0.5*rrP*(uP*uP+vP*vP+wP*wP));         

            }

        // Derivative of velocities
        const dfloat dudxM = (drudxM - drrdxM*uM)*irM;
        const dfloat dvdxM = (drvdxM - drrdxM*vM)*irM;
        const dfloat dwdxM = (drwdxM - drrdxM*wM)*irM;

        const dfloat dudyM = (drudyM - drrdyM*uM)*irM;
        const dfloat dvdyM = (drvdyM - drrdyM*vM)*irM;
        const dfloat dwdyM = (drwdyM - drrdyM*wM)*irM;

        const dfloat dudzM = (drudzM - drrdzM*uM)*irM;
        const dfloat dvdzM = (drvdzM - drrdzM*vM)*irM;
        const dfloat dwdzM = (drwdzM - drrdzM*wM)*irM;

              dfloat dudxP = (drudxP - drrdxP*uP)*irP;
              dfloat dvdxP = (drvdxP - drrdxP*vP)*irP;
              dfloat dwdxP = (drwdxP - drrdxP*wP)*irP;
              
              dfloat dudyP = (drudyP - drrdyP*uP)*irP;
              dfloat dvdyP = (drvdyP - drrdyP*vP)*irP;
              dfloat dwdyP = (drwdyP - drrdyP*wP)*irP;

              dfloat dudzP = (drudzP - drrdzP*uP)*irP;
              dfloat dvdzP = (drvdzP - drrdzP*vP)*irP;
              dfloat dwdzP = (drwdzP - drrdzP*wP)*irP;

        // derivative of kinetic energy
        const dfloat dkedxM = (uM*dudxM + vM*dvdxM + wM*dwdxM);
        const dfloat dkedyM = (uM*dudyM + vM*dvdyM + wM*dwdyM);
        const dfloat dkedzM = (uM*dudzM + vM*dvdzM + wM*dwdzM);

        const dfloat dkedxP = (uP*dudxP + vP*dvdxP + wP*dwdxP);
        const dfloat dkedyP = (uP*dudyP + vP*dvdyP + wP*dwdyP);
        const dfloat dkedzP = (uP*dudzP + vP*dvdzP + wP*dwdzP);

       if(p_viscType==2){ // Sutherland     
              const dfloat exp  = pCoeff[p_EXID]; // Exponential term
              const dfloat tr   = pCoeff[p_TRID]; // 1/Tref 
              const dfloat ts   = pCoeff[p_TSID]; // Ts/Tref
              const dfloat cs   = pCoeff[p_CSID]; // precomuted value to simlify
              const dfloat tnP   = pP*irP*tr/R; // non-dimensional temp
              muP  = (tnP > ts) ? (muP*pow(tnP, exp)*(1.0+ts)/(tnP + ts)) : muP*tnP*cs;  
            }else if(p_viscType==3){ // Powerlaw 
              // mu = mu_ref * (T/Tref)**exp = (mu_ref/T_ref**exp) * T**exp = ( mu )* T**exp
              const dfloat exp  = pCoeff[p_EXID]; // Exponential term
              const dfloat TempP  = pP*irP/R;       // Temperature
              muP = muP*pow(TempP, exp); 
            }

        const dfloat TxM = (dredxM*irM - rEM*drrdxM*irM*irM - dkedxM);
        const dfloat TyM = (dredyM*irM - rEM*drrdyM*irM*irM - dkedyM);
        const dfloat TzM = (dredzM*irM - rEM*drrdzM*irM*irM - dkedzM);

        const dfloat TxP = (dredxP*irP - rEP*drrdxP*irP*irP - dkedxP);
        const dfloat TyP = (dredyP*irP - rEP*drrdyP*irP*irP - dkedyP);
        const dfloat TzP = (dredzP*irP - rEP*drrdzP*irP*irP - dkedzP);

         const dfloat sbeta = 2.0/3.0; 


        dfloat T01M = 0., T02M = 0., T03M = 0.;
        dfloat T11M = muM*(2.0*dudxM - sbeta*(dudxM+dvdyM+dwdzM));
        dfloat T12M = muM*(dudyM+dvdxM);
        dfloat T13M = muM*(dudzM+dwdxM);

        dfloat T21M = T12M; 
        dfloat T22M = muM*(2.0*dvdyM - sbeta*(dudxM+dvdyM+dwdzM));
        dfloat T23M = muM*(dvdzM+dwdyM);

        dfloat T31M = T13M, T32M = T23M;         
        dfloat T33M = muM*(2.0*dwdzM - sbeta*(dudxM+dvdyM+dwdzM));

        const dfloat kappaM = CP*muM/Pr;
        dfloat T41M = uM*T11M + vM*T12M + wM*T13M + kappaM*TxM;
        dfloat T42M = uM*T12M + vM*T22M + wM*T23M + kappaM*TyM;
        dfloat T43M = uM*T13M + vM*T23M + wM*T33M + kappaM*TzM;

        dfloat T01P = 0., T02P = 0., T03P = 0.;
        dfloat T11P = muP*(2.0*dudxP - sbeta*(dudxP+dvdyP+dwdzP));
        dfloat T12P = muP*(dudyP+dvdxP);
        dfloat T13P = muP*(dudzP+dwdxP);

        dfloat T21P = T12P; 
        dfloat T22P = muP*(2.0*dvdyP - sbeta*(dudxP+dvdyP+dwdzP));
        dfloat T23P = muP*(dvdzP+dwdyP);

        dfloat T31P = T13P, T32P = T23P;         
        dfloat T33P = muP*(2.0*dwdzP - sbeta*(dudxP+dvdyP+dwdzP));

        const dfloat kappaP = CP*muP/Pr;
        dfloat T41P = uP*T11P + vP*T12P + wP*T13P + kappaP*TxP;
        dfloat T42P = uP*T12P + vP*T22P + wP*T23P + kappaP*TyP;
        dfloat T43P = uP*T13P + vP*T23P + wP*T33P + kappaP*TzP;
        
         // add artificial viscosity
        T01M += amuM*drrdxM, T02M += amuM*drrdyM, T03M += amuM*drrdzM;
        T11M += amuM*drudxM, T12M += amuM*drudyM, T13M += amuM*drudzM;
        T21M += amuM*drvdxM, T22M += amuM*drvdyM, T23M += amuM*drvdzM;
        T31M += amuM*drwdxM, T32M += amuM*drwdyM, T33M += amuM*drwdzM;
        T41M += amuM*dredxM, T42M += amuM*dredyM, T43M += amuM*dredyM;      

        T01P += amuP*drrdxP, T02P += amuP*drrdyP, T03P += amuP*drrdzP;
        T11P += amuP*drudxP, T12P += amuP*drudyP, T13P += amuP*drudzP;
        T21P += amuP*drvdxP, T22P += amuP*drvdyP, T23P += amuP*drvdzP;
        T31P += amuP*drwdxP, T32P += amuP*drwdyP, T33P += amuP*drwdzP;
        T41P += amuP*dredxP, T42P += amuP*dredyP, T43P += amuP*dredzP;  

        // viscous flux
        const dfloat alphaM = 0.5-beta, alphaP = 0.5+beta;  

  // - n \dot F_vis 
        rflux  -= (nx*(alphaM*T01M+alphaP*T01P-T01M)+
                   ny*(alphaM*T02M+alphaP*T02P-T02M)+
                   nz*(alphaM*T03M+alphaP*T03P-T03M)-tau*(rrM-rrP)); 

        ruflux -= (nx*(alphaM*T11M+alphaP*T11P-T11M)+
                   ny*(alphaM*T12M+alphaP*T12P-T12M)+
                   nz*(alphaM*T13M+alphaP*T13P-T13M)-tau*(ruM-ruP)); 

        rvflux -= (nx*(alphaM*T21M+alphaP*T21P-T21M)+
                   ny*(alphaM*T22M+alphaP*T22P-T22M)+
                   nz*(alphaM*T23M+alphaP*T23P-T23M)-tau*(rvM-rvP)); 
        
        rwflux -= (nx*(alphaM*T31M+alphaP*T31P-T31M)+
                   ny*(alphaM*T32M+alphaP*T32P-T32M)+
                   nz*(alphaM*T33M+alphaP*T33P-T33M)-tau*(rwM-rwP)); 
        
        Eflux  -= (nx*(alphaM*T41M+alphaP*T41P-T41M)+
                   ny*(alphaM*T42M+alphaP*T42P-T42M)+
                   nz*(alphaM*T43M+alphaP*T43P-T43M)-tau*(rEM-rEP)); 

        // evaluate "flux" terms: (sJ/J)*(A*nx+B*ny)*(q^* - q^-)
        const dfloat sc = invJ*sJ;
        s_rflux[n]  = sc*(-rflux );
        s_ruflux[n] = sc*(-ruflux);
        s_rvflux[n] = sc*(-rvflux);
        s_rwflux[n] = sc*(-rwflux);
        s_Eflux[n]  = sc*(-Eflux);

      }
    }
  
   
    // wait for all @shared memory writes of the previous inner loop to complete

    // for each node in the element
    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        // load rhs data from volume fluxes
        dfloat Lrflux = 0.f, Lruflux = 0.f, Lrvflux = 0.f, Lrwflux = 0.f, LEflux = 0.f;

        // rhs += LIFT*((sJ/J)*(A*nx+B*ny)*(q^* - q^-))
        #pragma unroll p_NfacesNfp
          for(int m=0;m<p_NfacesNfp;++m){
            const dfloat L = LIFT[n+m*p_Np];
            Lrflux  += L*s_rflux[m];
            Lruflux += L*s_ruflux[m];
            Lrvflux += L*s_rvflux[m];
            Lrwflux += L*s_rwflux[m];
            LEflux  += L*s_Eflux[m];
          }

        const dlong base = e*p_Np*p_Nfields+n;
        rhsq[base+0*p_Np] += Lrflux;
        rhsq[base+1*p_Np] += Lruflux;
        rhsq[base+2*p_Np] += Lrvflux;
        rhsq[base+3*p_Np] += Lrwflux;
        rhsq[base+4*p_Np] += LEflux;
      }
    }
  }
}
