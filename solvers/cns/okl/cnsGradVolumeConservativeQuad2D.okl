/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// Gradients of all conservative fields
@kernel void cnsGradVolumeConservativeQuad2D(const dlong Nelements,
                                            @restrict const  dfloat *  vgeo,
                                            @restrict const  dfloat *  D,
                                            @restrict const  dfloat *  q,
                                            @restrict        dfloat *  gradq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_rr[p_Nq][p_Nq];
    @shared dfloat s_ru[p_Nq][p_Nq];
    @shared dfloat s_rv[p_Nq][p_Nq];
    @shared dfloat s_re[p_Nq][p_Nq];

    @shared dfloat s_D[p_Nq][p_Nq];

   for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        s_D[j][i] = D[j*p_Nq+i];

        const dlong qbase = e*p_Nfields*p_Np + j*p_Nq + i;
        const dfloat rr = q[qbase + 0*p_Np];
        const dfloat ru = q[qbase + 1*p_Np];
        const dfloat rv = q[qbase + 2*p_Np];
        const dfloat re = q[qbase + 3*p_Np];

        s_rr[j][i] = rr;
        s_ru[j][i] = ru;
        s_rv[j][i] = rv;
        s_re[j][i] = re;
    }
  }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        dfloat drrdr = 0., drrds = 0.;
        dfloat drudr = 0., druds = 0.;
        dfloat drvdr = 0., drvds = 0.;
        dfloat dredr = 0., dreds = 0.;

        for(int n=0;n<p_Nq;++n){
          const dfloat Din = s_D[i][n];
          const dfloat Djn = s_D[j][n];
          // density
          drrdr += Din*s_rr[j][n];
          drrds += Djn*s_rr[n][i];
          // x-momentum
          drudr += Din*s_ru[j][n];
          druds += Djn*s_ru[n][i];
          // y-momentum
          drvdr += Din*s_rv[j][n];
          drvds += Djn*s_rv[n][i];
          // y-momentum
          dredr += Din*s_re[j][n];
          dreds += Djn*s_re[n][i];
        }

        const dlong gbase = e*p_Np*p_Nvgeo + j*p_Nq + i;
        const dfloat rx = vgeo[gbase+p_Np*p_RXID];
        const dfloat ry = vgeo[gbase+p_Np*p_RYID];
        const dfloat sx = vgeo[gbase+p_Np*p_SXID];
        const dfloat sy = vgeo[gbase+p_Np*p_SYID];

        const dfloat drrdx = rx*drrdr + sx*drrds;
        const dfloat drrdy = ry*drrdr + sy*drrds;
        // x-momentum
        const dfloat drudx = rx*drudr + sx*druds;
        const dfloat drudy = ry*drudr + sy*druds;
        // y-momentum
        const dfloat drvdx = rx*drvdr + sx*drvds;
        const dfloat drvdy = ry*drvdr + sy*drvds;
        // energy
        const dfloat dredx = rx*dredr + sx*dreds;
        const dfloat dredy = ry*dredr + sy*dreds;

        const dlong sbase = e*p_Ngrads*p_Np + j*p_Nq + i;
        gradq[sbase + 0*p_Np] = drrdx;
        gradq[sbase + 1*p_Np] = drrdy;
        gradq[sbase + 2*p_Np] = drudx;
        gradq[sbase + 3*p_Np] = drudy;
        gradq[sbase + 4*p_Np] = drvdx;
        gradq[sbase + 5*p_Np] = drvdy;
        gradq[sbase + 6*p_Np] = dredx;
        gradq[sbase + 7*p_Np] = dredy;
      }
    }
  }
}